[
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} rootNodeIri the Iri of the list's root node.",
        "name": "rootNodeIri",
        "description": "<p>the Iri of the list's root node.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Observable<ApiServiceResult | ApiServiceError>}",
        "types": [
          "Observable.<ApiServiceResult|ApiServiceError>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<a href=\"ApiServiceResult.html\">ApiServiceResult</a>|<a href=\"ApiServiceError.html\">ApiServiceError</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Observable&lt;ApiServiceResult | ApiServiceError&gt;}</p>"
      }
    ],
    "description": {
      "full": "<p>Gets a hierarchical list from Knora.</p>",
      "summary": "<p>Gets a hierarchical list from Knora.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 19,
    "codeStart": 25,
    "code": "private getListFromKnora(rootNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n    return this.httpGet('/v2/lists/' + encodeURIComponent(rootNodeIri));\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} rootNodeIri the root node of the list.",
        "name": "rootNodeIri",
        "description": "<p>the root node of the list.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Observable<object>} the expanded JSON-LD.",
        "types": [
          "Observable.<object>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<code>object</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>the expanded JSON-LD.</p>"
      }
    ],
    "description": {
      "full": "<p>Returns a list as expanded JSON-LD.</p>",
      "summary": "<p>Returns a list as expanded JSON-LD.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 29,
    "codeStart": 35,
    "code": "getList(rootNodeIri: string): Observable<object> {\n    const listJSONLD = this.getListFromKnora(rootNodeIri);\n\n    return listJSONLD.pipe(\n        mergeMap(\n            // this would return an Observable of a PromiseObservable -> combine them into one Observable\n            this.processJSONLD\n        )\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getList",
      "string": "getList()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} listNodeIri the Iri of the list node.",
        "name": "listNodeIri",
        "description": "<p>the Iri of the list node.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Observable<ApiServiceResult | ApiServiceError>}",
        "types": [
          "Observable.<ApiServiceResult|ApiServiceError>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<a href=\"ApiServiceResult.html\">ApiServiceResult</a>|<a href=\"ApiServiceError.html\">ApiServiceError</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Observable&lt;ApiServiceResult | ApiServiceError&gt;}</p>"
      }
    ],
    "description": {
      "full": "<p>Gets a list node from Knora.</p>",
      "summary": "<p>Gets a list node from Knora.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 46,
    "codeStart": 52,
    "code": "private getListNodeFromKnora(listNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n    return this.httpGet('/v2/node/' + encodeURIComponent(listNodeIri));\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} listNodeIri the Iri of the list node.",
        "name": "listNodeIri",
        "description": "<p>the Iri of the list node.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Observable<object>}",
        "types": [
          "Observable.<object>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<code>object</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Observable<object>}</p>"
      }
    ],
    "description": {
      "full": "<p>Returns a list node as expanded JSON-LD.</p>",
      "summary": "<p>Returns a list node as expanded JSON-LD.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 56,
    "codeStart": 62,
    "code": "getListNode(listNodeIri: string): Observable<object> {\n\n    const listNodeJSONLD = this.getListNodeFromKnora(listNodeIri);\n\n    return listNodeJSONLD.pipe(\n        mergeMap(\n            // this would return an Observable of a PromiseObservable -> combine them into one Observable\n            this.processJSONLD\n        )\n    );\n}\n}",
    "ctx": {
      "type": "method",
      "name": "getListNode",
      "string": "getListNode()"
    }
  }
]