[
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nUse the class ProjectsEndpoint from `@knora/api` (github:dasch-swiss/knora-api-js-lib) instead.",
        "html": "<p>since v9.5.0<br />\nUse the class ProjectsEndpoint from <code>@knora/api</code> (github:dasch-swiss/knora-api-js-lib) instead.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 8,
    "codeStart": 13,
    "code": "@Injectable({\n    providedIn: 'root'\n})\nexport class ProjectsService extends ApiService {\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nReturns a list of all projects.",
        "html": "<p>since v9.5.0<br />\nReturns a list of all projects.</p>"
      },
      {
        "type": "returns",
        "string": "Observable<Project[]>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable&lt;Project[]&gt;</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 22,
    "codeStart": 29,
    "code": "getAllProjects(): Observable<Project[]> {\n    return this.httpGet('/admin/projects').pipe(\n        map((result: ApiServiceResult) => result.getBody(ProjectsResponse).projects),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getAllProjects",
      "string": "getAllProjects()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nReturns a project object.",
        "html": "<p>since v9.5.0<br />\nReturns a project object.</p>"
      },
      {
        "type": "param",
        "string": "{string} iri identifier of the project",
        "name": "iri",
        "description": "<p>identifier of the project</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<Project>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<Project></p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 36,
    "codeStart": 44,
    "code": "getProjectByIri(iri: string): Observable<Project> {\n    const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n    return this.getProject(url);\n}",
    "ctx": {
      "type": "method",
      "name": "getProjectByIri",
      "string": "getProjectByIri()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nReturns a project object.",
        "html": "<p>since v9.5.0<br />\nReturns a project object.</p>"
      },
      {
        "type": "param",
        "string": "{string} shortname short name that is used to identify the project",
        "name": "shortname",
        "description": "<p>short name that is used to identify the project</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<Project>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<Project></p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 49,
    "codeStart": 57,
    "code": "getProjectByShortname(shortname: string): Observable<Project> {\n    const url = '/admin/projects/shortname/' + shortname;\n    return this.getProject(url);\n}",
    "ctx": {
      "type": "method",
      "name": "getProjectByShortname",
      "string": "getProjectByShortname()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nReturns a project object.",
        "html": "<p>since v9.5.0<br />\nReturns a project object.</p>"
      },
      {
        "type": "param",
        "string": "{string} shortcode hexadecimal code that uniquely identifies the project",
        "name": "shortcode",
        "description": "<p>hexadecimal code that uniquely identifies the project</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<Project>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<Project></p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 62,
    "codeStart": 70,
    "code": "getProjectByShortcode(shortcode: string): Observable<Project> {\n    const url = '/admin/projects/shortcode/' + shortcode;\n    return this.getProject(url);\n}",
    "ctx": {
      "type": "method",
      "name": "getProjectByShortcode",
      "string": "getProjectByShortcode()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      },
      {
        "type": "private",
        "string": "\nHelper method combining project retrieval.",
        "visibility": "private",
        "html": "<p>Helper method combining project retrieval.</p>"
      },
      {
        "type": "param",
        "string": "{string} url",
        "name": "url",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} url</p>"
      },
      {
        "type": "returns",
        "string": "Observable<Project>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<Project></p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 75,
    "codeStart": 84,
    "code": "protected getProject(url: string): Observable<Project> {\n    return this.httpGet(url).pipe(\n        map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nReturns all project members.\nProject identifier is project id (iri).",
        "html": "<p>since v9.5.0<br />\nReturns all project members.<br />\nProject identifier is project id (iri).</p>"
      },
      {
        "type": "param",
        "string": "{string} iri identifier of the project",
        "name": "iri",
        "description": "<p>identifier of the project</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<User[]>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable&lt;User[]&gt;</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 91,
    "codeStart": 100,
    "code": "getProjectMembersByIri(iri: string): Observable<User[]> {\n    const url = '/admin/projects/iri/' + encodeURIComponent(iri) + '/members';\n    return this.getProjectMembers(url);\n}",
    "ctx": {
      "type": "method",
      "name": "getProjectMembersByIri",
      "string": "getProjectMembersByIri()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nReturns all project members.\nProject identifier is shortname.",
        "html": "<p>since v9.5.0<br />\nReturns all project members.<br />\nProject identifier is shortname.</p>"
      },
      {
        "type": "param",
        "string": "{string} shortname short name that is used to identify the project",
        "name": "shortname",
        "description": "<p>short name that is used to identify the project</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<User[]>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable&lt;User[]&gt;</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 105,
    "codeStart": 114,
    "code": "getProjectMembersByShortname(shortname: string): Observable<User[]> {\n    const url = '/admin/projects/shortname/' + shortname + '/members';\n    return this.getProjectMembers(url);\n}",
    "ctx": {
      "type": "method",
      "name": "getProjectMembersByShortname",
      "string": "getProjectMembersByShortname()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nReturns all project members.\nProject identifier is shortcode.",
        "html": "<p>since v9.5.0<br />\nReturns all project members.<br />\nProject identifier is shortcode.</p>"
      },
      {
        "type": "param",
        "string": "{string} shortcode hexadecimal code that uniquely identifies the project",
        "name": "shortcode",
        "description": "<p>hexadecimal code that uniquely identifies the project</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<User[]>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable&lt;User[]&gt;</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 119,
    "codeStart": 128,
    "code": "getProjectMembersByShortcode(shortcode: string): Observable<User[]> {\n    const url = '/admin/projects/shortcode/' + shortcode + '/members';\n    return this.getProjectMembers(url);\n}",
    "ctx": {
      "type": "method",
      "name": "getProjectMembersByShortcode",
      "string": "getProjectMembersByShortcode()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      },
      {
        "type": "private",
        "string": "\nHelper method combining project member retrieval.",
        "visibility": "private",
        "html": "<p>Helper method combining project member retrieval.</p>"
      },
      {
        "type": "param",
        "string": "{string} url",
        "name": "url",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} url</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User[]>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable&lt;User[]&gt;</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 133,
    "codeStart": 142,
    "code": "private getProjectMembers(url: string): Observable<User[]> {\n    return this.httpGet(url).pipe(\n        map((result: ApiServiceResult) => result.getBody(ProjectMembersResponse).members),\n        catchError(this.handleJsonError)\n    );\n}\n\n\n// ------------------------------------------------------------------------\n// POST\n// ------------------------------------------------------------------------",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nCreate new project.",
        "html": "<p>since v9.5.0<br />\nCreate new project.</p>"
      },
      {
        "type": "param",
        "string": "{any} data",
        "name": "data",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} data</p>"
      },
      {
        "type": "returns",
        "string": "Observable<Project>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<Project></p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 154,
    "codeStart": 162,
    "code": "createProject(data: any): Observable<Project> {\n    const url: string = '/admin/projects';\n    return this.httpPost(url, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n        catchError(this.handleJsonError)\n    );\n}\n\n// ------------------------------------------------------------------------\n// PUT\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "createProject",
      "string": "createProject()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nEdit project data.",
        "html": "<p>since v9.5.0<br />\nEdit project data.</p>"
      },
      {
        "type": "param",
        "string": "{string} iri identifier of the project",
        "name": "iri",
        "description": "<p>identifier of the project</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{any} data",
        "name": "data",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} data</p>"
      },
      {
        "type": "returns",
        "string": "Observable<Project>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<Project></p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 174,
    "codeStart": 183,
    "code": "updateProject(iri: string, data: any): Observable<Project> {\n    const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n    return this.httpPut(url, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "updateProject",
      "string": "updateProject()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nActivate project (if it was deleted).",
        "html": "<p>since v9.5.0<br />\nActivate project (if it was deleted).</p>"
      },
      {
        "type": "param",
        "string": "{string} iri identifier of the project",
        "name": "iri",
        "description": "<p>identifier of the project</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<Project>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<Project></p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 193,
    "codeStart": 201,
    "code": "activateProject(iri: string): Observable<Project> {\n    const data: any = {\n        status: true\n    };\n\n    const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n    return this.httpPut(url, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n        catchError(this.handleJsonError)\n    );\n}\n\n\n// ------------------------------------------------------------------------\n// DELETE\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "activateProject",
      "string": "activateProject()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nDelete (set inactive) project.",
        "html": "<p>since v9.5.0<br />\nDelete (set inactive) project.</p>"
      },
      {
        "type": "param",
        "string": "{string} iri identifier of the project",
        "name": "iri",
        "description": "<p>identifier of the project</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<Project>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<Project></p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 219,
    "codeStart": 227,
    "code": "deleteProject(iri: string): Observable<Project> {\n    const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n    return this.httpDelete(url).pipe(\n        map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n        catchError(this.handleJsonError)\n    );\n}\n\n}",
    "ctx": {
      "type": "method",
      "name": "deleteProject",
      "string": "deleteProject()"
    }
  }
]