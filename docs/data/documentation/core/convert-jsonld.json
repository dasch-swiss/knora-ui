[
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nContains methods to convert JSON-LD representing resources and properties to classes.\nThese methods works only for instances of resources and properties, not for ontologies (data model).",
        "html": "<p>since v9.5.0<br />\nContains methods to convert JSON-LD representing resources and properties to classes.<br />\nThese methods works only for instances of resources and properties, not for ontologies (data model).</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3,
    "codeStart": 9,
    "code": "export module ConvertJSONLD {",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 Function to be passed to a filter used on an array of property names\nsorting out all non value property names.\n\nGets all property names that refer to value objects.",
        "html": "<p>since v9.5.0 Function to be passed to a filter used on an array of property names<br />\nsorting out all non value property names.</p>\n<p>Gets all property names that refer to value objects.</p>"
      },
      {
        "type": "param",
        "string": "propName the name of a property to be checked.",
        "name": "propName",
        "description": "<p>the name of a property to be checked.</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "returns",
        "string": "boolean - indicating if the name refers to a value property.",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>boolean - indicating if the name refers to a value property.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 11,
    "codeStart": 21,
    "code": "const getPropertyNames = (propName) => {\n    return propName !== '@id'\n        && propName !== '@type'\n        && propName !== KnoraConstants.RdfsLabel\n        && propName !== KnoraConstants.attachedToProject\n        && propName !== KnoraConstants.attachedToUser\n        && propName !== KnoraConstants.creationDate\n        && propName !== KnoraConstants.lastModificationDate\n        && propName !== KnoraConstants.hasPermissions\n        && propName !== KnoraConstants.userHasPermission\n        && propName !== KnoraConstants.ArkUrl\n        && propName !== KnoraConstants.versionArkUrl;\n};",
    "ctx": {
      "type": "declaration",
      "name": "getPropertyNames",
      "value": "(propName) => {",
      "string": "getPropertyNames"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "Use the function **constructResource** instead - see below \nConstructs a [[ReadResource]] from JSON-LD.\nExpects JSON-LD with all Iris fully expanded.",
        "html": "<p>Use the function <strong>constructResource</strong> instead - see below<br />\nConstructs a [[ReadResource]] from JSON-LD.<br />\nExpects JSON-LD with all Iris fully expanded.</p>"
      },
      {
        "type": "param",
        "string": "{object} resourceJSONLD an a resource and its properties serialized as JSON-LD.",
        "name": "resourceJSONLD",
        "description": "<p>an a resource and its properties serialized as JSON-LD.</p>",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "ReadResource",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>ReadResource</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 36,
    "codeStart": 45,
    "code": "function constructReadResource(resourceJSONLD: object): ReadResource {\n\n    const properties: ReadProperties = constructReadProperties(resourceJSONLD);\n\n    return new ReadResource(\n        resourceJSONLD['@id'],\n        resourceJSONLD['@type'],\n        resourceJSONLD[KnoraConstants.RdfsLabel],\n        [], // to be updated once another request has been made\n        [], // to be updated once another request has been made\n        [], // to be updated once another request has been made\n        [], // to be updated once another request has been made\n        properties\n    );\n}",
    "ctx": {
      "type": "function",
      "name": "constructReadResource",
      "string": "constructReadResource()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 61,
    "codeStart": 64,
    "code": "function constructResource(resourceJSONLD: object): Resource {\n\n    const properties: ReadProperties = constructReadProperties(resourceJSONLD);\n\n    return new Resource(\n        resourceJSONLD['@id'],\n        resourceJSONLD['@type'],\n        resourceJSONLD[KnoraConstants.RdfsLabel],\n        [], // incomingAnnotations; to be updated once another request has been made\n        [], // incomingFileRepresentations, to be updated once another request has been made\n        [], // incomingLinks; to be updated once another request has been made\n        {}, // fileRepresentationsToDisplay; to be updated once another request has been made\n        properties\n    );\n}",
    "ctx": {
      "type": "function",
      "name": "constructResource",
      "string": "constructResource()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 Constructs a [[ReadPropertyItem]] from JSON-LD,\ntaking into account the property's value type.\nExpects JSON-LD with all Iris fully expanded.",
        "html": "<p>since v9.5.0 Constructs a [[ReadPropertyItem]] from JSON-LD,<br />\ntaking into account the property's value type.<br />\nExpects JSON-LD with all Iris fully expanded.</p>"
      },
      {
        "type": "param",
        "string": "{Object} propValue the value serialized as JSON-LD.",
        "name": "propValue",
        "description": "<p>the value serialized as JSON-LD.</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} propIri the Iri of the property.",
        "name": "propIri",
        "description": "<p>the Iri of the property.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{ReadLinkValue[]} standoffLinkValues standoffLinkValues of the resource. Text values may contain links to other resources.",
        "name": "standoffLinkValues",
        "description": "<p>standoffLinkValues of the resource. Text values may contain links to other resources.</p>",
        "types": [
          "Array.<ReadLinkValue>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<a href=\"ReadLinkValue.html\">ReadLinkValue</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "a [[ReadPropertyItem]] or `undefined` in case the value could not be processed correctly.",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>a [[ReadPropertyItem]] or <code>undefined</code> in case the value could not be processed correctly.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 80,
    "codeStart": 91,
    "code": "function createValueSpecificProp(\n    propValue: Object, propIri: string, standoffLinkValues: ReadLinkValue[]): ReadPropertyItem | undefined {\n\n    // convert a JSON-LD property value to a `ReadPropertyItem`\n\n    let valueSpecificProp: ReadPropertyItem;\n\n    // check for the property's value type\n    switch (propValue['@type']) {\n        case KnoraConstants.TextValue:\n            // a text value might be given as plain string, html or xml.\n            let textValue: ReadPropertyItem;\n\n            if (propValue[KnoraConstants.valueAsString] !== undefined) {\n                textValue = new ReadTextValueAsString(propValue['@id'], propIri, propValue[KnoraConstants.valueAsString]);\n            } else if (propValue[KnoraConstants.textValueAsHtml] !== undefined) {\n\n                const referredResources: ReferredResourcesByStandoffLink = {};\n\n                // check for standoff links and include referred resources, if any\n                // when the user interacts with a standoff link, further information about the referred resource can be shown\n                for (const standoffLink of standoffLinkValues) {\n                    const referredRes: ReadResource = standoffLink.referredResource;\n                    referredResources[referredRes.id] = referredRes;\n                }\n\n                textValue = new ReadTextValueAsHtml(\n                    propValue['@id'], propIri, propValue[KnoraConstants.textValueAsHtml], referredResources\n                );\n            } else if (\n                propValue[KnoraConstants.textValueAsXml] !== undefined && propValue[KnoraConstants.textValueHasMapping]['@id'] !== undefined) {\n                textValue = new ReadTextValueAsXml(\n                    propValue['@id'], propIri, propValue[KnoraConstants.textValueAsXml], propValue[KnoraConstants.textValueHasMapping]['@id']\n                );\n            } else {\n                // expected text value members not defined\n                console.error('ERROR: Invalid text value: ' + JSON.stringify(propValue));\n            }\n\n            valueSpecificProp = textValue;\n            break;\n\n        case KnoraConstants.DateValue:\n            const dateValue = new ReadDateValue(propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.dateValueHasCalendar],\n                propValue[KnoraConstants.dateValueHasStartYear],\n                propValue[KnoraConstants.dateValueHasEndYear],\n                propValue[KnoraConstants.dateValueHasStartEra],\n                propValue[KnoraConstants.dateValueHasEndEra],\n                propValue[KnoraConstants.dateValueHasStartMonth],\n                propValue[KnoraConstants.dateValueHasEndMonth],\n                propValue[KnoraConstants.dateValueHasStartDay],\n                propValue[KnoraConstants.dateValueHasEndDay]);\n\n            valueSpecificProp = dateValue;\n            break;\n\n        case KnoraConstants.LinkValue:\n\n            let linkValue: ReadLinkValue;\n\n            // check if the referred resource is given as an object or just as an IRI\n            if (propValue[KnoraConstants.linkValueHasTarget] !== undefined) {\n                // linkValueHasTarget contains the object\n\n                const referredResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasTarget]);\n\n                linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResource.id, referredResource);\n            } else if (propValue[KnoraConstants.linkValueHasTargetIri] !== undefined) {\n                // linkValueHasTargetIri contains the resource's Iri\n\n                const referredResourceIri = propValue[KnoraConstants.linkValueHasTargetIri]['@id'];\n\n                linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResourceIri);\n            } else if (propValue[KnoraConstants.linkValueHasSource] !== undefined) {\n                // linkValueHasSource contains the object\n\n                const incomingResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasSource]);\n\n                linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResource.id, incomingResource);\n            } else if (propValue[KnoraConstants.linkValueHasSourceIri] !== undefined) {\n                // linkValueHasSourceIri contains the resource's Iri\n\n                const incomingResourceIri = propValue[KnoraConstants.linkValueHasSourceIri]['@id'];\n\n                linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResourceIri);\n            }\n\n            valueSpecificProp = linkValue;\n            break;\n\n        case KnoraConstants.IntValue:\n\n            const intValue = new ReadIntegerValue(propValue['@id'], propIri, propValue[KnoraConstants.integerValueAsInteger]);\n            valueSpecificProp = intValue;\n\n            break;\n\n        case KnoraConstants.DecimalValue:\n\n            // a decimal value is represented as a string in order to preserve its precision\n            const decVal: number = parseFloat(propValue[KnoraConstants.decimalValueAsDecimal]['@value']);\n\n            const decimalValue = new ReadDecimalValue(propValue['@id'], propIri, decVal);\n            valueSpecificProp = decimalValue;\n\n            break;\n\n\n        case KnoraConstants.StillImageFileValue:\n\n            const stillImageFileValue: ReadStillImageFileValue = new ReadStillImageFileValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.fileValueHasFilename],\n                propValue[KnoraConstants.stillImageFileValueHasIIIFBaseUrl]['@value'],\n                propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                propValue[KnoraConstants.stillImageFileValueHasDimX],\n                propValue[KnoraConstants.stillImageFileValueHasDimY]\n            );\n\n            valueSpecificProp = stillImageFileValue;\n\n            break;\n\n        case KnoraConstants.MovingImageFileValue:\n\n            const movingImageFileValue: ReadMovingImageFileValue = new ReadMovingImageFileValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.fileValueHasFilename],\n                propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                propValue[KnoraConstants.movingImageFileValueHasDimX],\n                propValue[KnoraConstants.movingImageFileValueHasDimY],\n                propValue[KnoraConstants.movingImageFileValueHasDuration],\n                propValue[KnoraConstants.movingImageFileValueHasFps]\n            );\n\n            valueSpecificProp = movingImageFileValue;\n\n            break;\n\n        case KnoraConstants.AudioFileValue:\n\n            const audioFileValue: ReadAudioFileValue = new ReadAudioFileValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.fileValueHasFilename],\n                propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                propValue[KnoraConstants.audioFileValueHasDuration]\n            );\n\n            valueSpecificProp = audioFileValue;\n\n            break;\n\n        case KnoraConstants.DDDFileValue:\n\n            const dddFileValue: ReadDDDFileValue = new ReadDDDFileValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.fileValueHasFilename],\n                propValue[KnoraConstants.fileValueAsUrl]['@value']\n            );\n\n            valueSpecificProp = dddFileValue;\n\n            break;\n\n        case KnoraConstants.DocumentFileValue:\n\n            const documentFileValue: ReadDocumentFileValue = new ReadDocumentFileValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.fileValueHasFilename],\n                propValue[KnoraConstants.fileValueAsUrl]['@value']\n            );\n\n            valueSpecificProp = documentFileValue;\n\n            break;\n\n        case KnoraConstants.TextFileValue:\n\n            const textFileValue = new ReadTextFileValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.fileValueHasFilename],\n                propValue[KnoraConstants.fileValueAsUrl]['@value']\n            );\n\n            valueSpecificProp = textFileValue;\n\n            break;\n\n        case KnoraConstants.ColorValue:\n\n            const readColorValue: ReadColorValue = new ReadColorValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.colorValueAsColor]\n            );\n\n            valueSpecificProp = readColorValue;\n\n            break;\n\n        case KnoraConstants.GeomValue:\n\n            const readGeomValue: ReadGeomValue = new ReadGeomValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.geometryValueAsGeometry]\n            );\n\n            valueSpecificProp = readGeomValue;\n\n            break;\n\n        case KnoraConstants.UriValue:\n\n            const uriValue: ReadUriValue = new ReadUriValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.uriValueAsUri]['@value']\n            );\n\n            valueSpecificProp = uriValue;\n\n            break;\n\n        case KnoraConstants.BooleanValue:\n\n            const boolValue: ReadBooleanValue = new ReadBooleanValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.booleanValueAsBoolean]\n            );\n\n            valueSpecificProp = boolValue;\n\n            break;\n\n\n        case KnoraConstants.IntervalValue:\n\n            // represented as strings to preserve precision\n            const intStart = parseFloat(propValue[KnoraConstants.intervalValueHasStart]['@value']);\n            const intEnd = parseFloat(propValue[KnoraConstants.intervalValueHasEnd]['@value']);\n\n            const intervalValue: ReadIntervalValue = new ReadIntervalValue(\n                propValue['@id'],\n                propIri,\n                intStart,\n                intEnd\n            );\n\n            valueSpecificProp = intervalValue;\n\n            break;\n\n        case KnoraConstants.ListValue:\n\n            const listValue: ReadListValue = new ReadListValue(\n                propValue['@id'],\n                propIri,\n                propValue[KnoraConstants.listValueAsListNode]['@id']\n            );\n\n            valueSpecificProp = listValue;\n\n            break;\n\n        default:\n            // unsupported value type\n            console.error('ERROR: value type not implemented yet: ' + propValue['@type'] + '(' + propValue['@id'] + ')');\n            break;\n    }\n\n    return valueSpecificProp;\n\n}",
    "ctx": {
      "type": "function",
      "name": "createValueSpecificProp",
      "string": "createValueSpecificProp()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 Construct a [[ReadProperties]] from JSON-LD.\nExpects JSON-LD with all Iris fully expanded.",
        "html": "<p>since v9.5.0 Construct a [[ReadProperties]] from JSON-LD.<br />\nExpects JSON-LD with all Iris fully expanded.</p>"
      },
      {
        "type": "param",
        "string": "{object} resourceJSONLD an object describing the resource and its properties.",
        "name": "resourceJSONLD",
        "description": "<p>an object describing the resource and its properties.</p>",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "ReadProperties",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>ReadProperties</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 376,
    "codeStart": 384,
    "code": "function constructReadProperties(resourceJSONLD: object): ReadProperties {\n\n    // JSON-LD representing standoff link values\n    // text values may contain standoff links\n    const standoffLinkValuesJSONLD: Object = resourceJSONLD[KnoraConstants.hasStandoffLinkToValue];\n\n    // to be populated with standoff link values\n    const standoffLinkValues: ReadLinkValue[] = [];\n\n    // convert each standoff link value JSON-LD object to a ReadLinkValue\n    // in order populate the collection with all the standoff link values\n    if (standoffLinkValuesJSONLD !== undefined && Array.isArray(standoffLinkValuesJSONLD)) {\n        for (const standoffLinkJSONLD of standoffLinkValuesJSONLD) {\n            const standoffVal: ReadLinkValue = createValueSpecificProp(\n                standoffLinkJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n            ) as ReadLinkValue;\n\n            standoffLinkValues.push(standoffVal);\n        }\n    } else if (standoffLinkValuesJSONLD !== undefined) {\n        const standoffVal = createValueSpecificProp(\n            standoffLinkValuesJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n        ) as ReadLinkValue;\n\n        standoffLinkValues.push(standoffVal);\n    }\n\n    let propNames = Object.keys(resourceJSONLD);\n\n    // filter out everything that is not a Knora property name\n    propNames = propNames.filter(getPropertyNames);\n\n    const properties: ReadProperties = {};\n\n    // iterate over all the given property names\n    for (const propName of propNames) {\n\n        const propValues: Array<ReadPropertyItem> = [];\n\n        // either an array of values or just one value is given\n        if (Array.isArray(resourceJSONLD[propName])) {\n            // array of values\n\n            // for each property name, an array of property values is given, iterate over it\n            for (const propValue of resourceJSONLD[propName]) {\n\n                // convert a JSON-LD property value to a `ReadPropertyItem`\n                const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(propValue, propName, standoffLinkValues);\n\n                // if it is undefined, the value could not be constructed correctly\n                // add the property value to the array of property values\n                if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n\n            }\n        } else {\n            // only one value\n\n            const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(resourceJSONLD[propName], propName, standoffLinkValues);\n\n            // if it is undefined, the value could not be constructed correctly\n            // add the property value to the array of property values\n            if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n        }\n\n        // add the property to the properties object\n        properties[propName] = propValues;\n\n    }\n\n    return properties;\n}",
    "ctx": {
      "type": "function",
      "name": "constructReadProperties",
      "string": "constructReadProperties()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 Turns an API response in JSON-LD representing a sequence of resources into a [[ReadResourcesSequence]].\nExpects JSON-LD with all Iris fully expanded.",
        "html": "<p>since v9.5.0 Turns an API response in JSON-LD representing a sequence of resources into a [[ReadResourcesSequence]].<br />\nExpects JSON-LD with all Iris fully expanded.</p>"
      },
      {
        "type": "param",
        "string": "{object} resourcesResponseJSONLD a resource or a sequence of resources, represented as a JSON-LD object.",
        "name": "resourcesResponseJSONLD",
        "description": "<p>a resource or a sequence of resources, represented as a JSON-LD object.</p>",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "ReadResourcesSequence - sequence of read resources",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>ReadResourcesSequence - sequence of read resources</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 456,
    "codeStart": 464,
    "code": "export function createReadResourcesSequenceFromJsonLD(resourcesResponseJSONLD: object): ReadResourcesSequence {\n\n    const resources: Array<ReadResource> = [];\n    let numberOfResources: number;\n    const resourcesGraph = resourcesResponseJSONLD['@graph'];\n\n    // either an array of resources or just one resource is given\n    if (resourcesGraph !== undefined) {\n        // an array of resources\n        numberOfResources = resourcesGraph.length;\n\n        for (const resourceJSONLD of resourcesGraph) {\n\n            const resource: ReadResource = constructReadResource(resourceJSONLD);\n\n            // add the resource to the resources array\n            resources.push(resource);\n        }\n    } else {\n        if (Object.keys(resourcesResponseJSONLD).length === 0) {\n            // empty answer, no resources given\n            numberOfResources = 0;\n        } else {\n\n            // only one resource\n            numberOfResources = 1;\n\n            const resource: ReadResource = constructReadResource(resourcesResponseJSONLD);\n\n            // add the resource to the resources array\n            resources.push(resource);\n        }\n    }\n\n    return new ReadResourcesSequence(resources, numberOfResources);\n\n}",
    "ctx": {
      "type": "function",
      "name": "createReadResourcesSequenceFromJsonLD",
      "string": "createReadResourcesSequenceFromJsonLD()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      },
      {
        "type": "param",
        "string": "resourcesResponseJSONLD",
        "name": "resourcesResponseJSONLD",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>resourcesResponseJSONLD</p>"
      },
      {
        "type": "returns",
        "string": "ResourcesSequence",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>ResourcesSequence</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 502,
    "codeStart": 507,
    "code": "export function createResourcesSequenceFromJsonLD(resourcesResponseJSONLD: object): ResourcesSequence {\n\n    const resources: Array<Resource> = [];\n    let numberOfResources: number;\n    const resourcesGraph = resourcesResponseJSONLD['@graph'];\n\n    // either an array of resources or just one resource is given\n    if (resourcesGraph !== undefined) {\n        // an array of resources\n        numberOfResources = resourcesGraph.length;\n\n        for (const resourceJSONLD of resourcesGraph) {\n\n            const resource: Resource = constructResource(resourceJSONLD);\n\n            // add the resource to the resources array\n            resources.push(resource);\n        }\n    } else {\n        if (Object.keys(resourcesResponseJSONLD).length === 0) {\n            // empty answer, no resources given\n            numberOfResources = 0;\n        } else {\n\n            // only one resource\n            numberOfResources = 1;\n\n            const resource: Resource = constructResource(resourcesResponseJSONLD);\n\n            // add the resource to the resources array\n            resources.push(resource);\n        }\n    }\n\n    return new ResourcesSequence(resources, numberOfResources);\n\n}",
    "ctx": {
      "type": "function",
      "name": "createResourcesSequenceFromJsonLD",
      "string": "createResourcesSequenceFromJsonLD()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 Collects all the types (classes) of referred resources from a given resource (from its linking properties).\nExpects JSON-LD with all Iris fully expanded.",
        "html": "<p>since v9.5.0 Collects all the types (classes) of referred resources from a given resource (from its linking properties).<br />\nExpects JSON-LD with all Iris fully expanded.</p>"
      },
      {
        "type": "param",
        "string": "{object} resourceJSONLD JSON-LD describing one resource.",
        "name": "resourceJSONLD",
        "description": "<p>JSON-LD describing one resource.</p>",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "string[] - an Array of resource class Iris (including duplicates).",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>string[] - an Array of resource class Iris (including duplicates).</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 545,
    "codeStart": 553,
    "code": "function getReferredResourceClasses(resourceJSONLD: object): string[] {\n\n    let propNames = Object.keys(resourceJSONLD);\n    // filter out everything that is not a Knora property name\n    propNames = propNames.filter(getPropertyNames);\n\n    const referredResourceClasses = [];\n\n    for (const prop of propNames) {\n\n        // several values given for this property\n        if (Array.isArray(resourceJSONLD[prop])) {\n\n            for (const referredRes of resourceJSONLD[prop]) {\n\n                // if the property is a LinkValue and it contains an embedded resource, get its type\n                if (referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasTarget] !== undefined) {\n\n                    // target resource is represented\n                    referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasTarget]['@type']);\n                } else if (\n                    referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasSource] !== undefined) {\n                    // source resource is represented\n                    referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasSource]['@type']);\n                }\n\n            }\n        } else {\n            // only one value given for this property\n\n            // if the property is a LinkValue and it contains an embedded resource, get its type\n            if (\n                resourceJSONLD[prop]['@type']\n                === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]\n                !== undefined) {\n\n                // target resource is represented\n                referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]['@type']);\n            } else if (\n                resourceJSONLD[prop]['@type']\n                === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasSource]\n                !== undefined) {\n                // source resource is represented\n                referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasSource]['@type']);\n            }\n        }\n\n    }\n\n    return referredResourceClasses;\n\n}",
    "ctx": {
      "type": "function",
      "name": "getReferredResourceClasses",
      "string": "getReferredResourceClasses()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 Gets the resource types (classes) from a JSON-LD representing a sequence of resources.\nExpects JSON-LD with all Iris fully expanded.",
        "html": "<p>since v9.5.0 Gets the resource types (classes) from a JSON-LD representing a sequence of resources.<br />\nExpects JSON-LD with all Iris fully expanded.</p>"
      },
      {
        "type": "param",
        "string": "resourcesResponseJSONLD a sequence of resources, represented as a JSON-LD object.",
        "name": "resourcesResponseJSONLD",
        "description": "<p>a sequence of resources, represented as a JSON-LD object.</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "returns",
        "string": "string[] - the resource class Iris (without duplicates).",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>string[] - the resource class Iris (without duplicates).</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 606,
    "codeStart": 614,
    "code": "export function getResourceClassesFromJsonLD(resourcesResponseJSONLD: object): string[] {\n\n    const resourcesGraph = resourcesResponseJSONLD['@graph'];\n    let resourceClasses: Array<string> = [];\n\n    // either an array of resources or just one resource is given\n    if (resourcesGraph !== undefined) {\n        // an array of resources\n\n        for (const resourceJSONLD of resourcesGraph) {\n            // get class of the current resource\n            resourceClasses.push(resourceJSONLD['@type']);\n\n            // get the classes of referred resources\n            const referredResourceClasses = getReferredResourceClasses(resourceJSONLD);\n\n            resourceClasses = resourceClasses.concat(referredResourceClasses);\n\n        }\n\n    } else {\n        // only one resource\n\n        if (Object.keys(resourcesResponseJSONLD).length === 0) {\n            return [];\n        } else {\n            resourceClasses.push(resourcesResponseJSONLD['@type']);\n\n            // get the classes of referred resources\n            const referredResourceClasses = getReferredResourceClasses(resourcesResponseJSONLD);\n\n            resourceClasses = resourceClasses.concat(referredResourceClasses);\n        }\n    }\n\n    // filter out duplicates\n    return resourceClasses.filter(Utils.filterOutDuplicates);\n\n}",
    "ctx": {
      "type": "function",
      "name": "getResourceClassesFromJsonLD",
      "string": "getResourceClassesFromJsonLD()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 Turns a JSON-LD response to a count query into a `CountQueryResult`.\nExpects JSON-LD with all Iris fully expanded.",
        "html": "<p>since v9.5.0 Turns a JSON-LD response to a count query into a <code>CountQueryResult</code>.<br />\nExpects JSON-LD with all Iris fully expanded.</p>"
      },
      {
        "type": "param",
        "string": "countQueryJSONLD",
        "name": "countQueryJSONLD",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>countQueryJSONLD</p>"
      },
      {
        "type": "returns",
        "string": "{CountQueryResult}",
        "types": [
          "CountQueryResult"
        ],
        "typesDescription": "<a href=\"CountQueryResult.html\">CountQueryResult</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{CountQueryResult}</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 654,
    "codeStart": 662,
    "code": "export function createCountQueryResult(countQueryJSONLD: object) {\n    return new CountQueryResult(countQueryJSONLD[KnoraConstants.schemaNumberOfItems]);\n}\n}",
    "ctx": {
      "type": "function",
      "name": "createCountQueryResult",
      "string": "createCountQueryResult()"
    }
  }
]