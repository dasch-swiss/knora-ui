[
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "Use new service from `@knora/api` (github:dasch-swiss/knora-api-js-lib) instead \nRequests representation of resources from Knora.",
        "html": "<p>Use new service from <code>@knora/api</code> (github:dasch-swiss/knora-api-js-lib) instead<br />\nRequests representation of resources from Knora.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 14,
    "codeStart": 19,
    "code": "@Injectable({\n    providedIn: 'root'\n})\nexport class ResourceService extends ApiService {\n\n    constructor(public http: HttpClient,\n        @Inject(KuiConfigToken) public config,\n        private _incomingService: IncomingService,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} iri Iri of the resource (not yet URL encoded).",
        "name": "iri",
        "description": "<p>Iri of the resource (not yet URL encoded).</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult></p>"
      }
    ],
    "description": {
      "full": "<p>Given the Iri, requests the representation of a resource.</p>",
      "summary": "<p>Given the Iri, requests the representation of a resource.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 31,
    "codeStart": 37,
    "code": "// this should return a resource object with incoming links, annotations, file representations\n// it includes a property: FileRepresentation to display with the parameters for the media type viewer\ngetResource(iri: string): Observable<ResourcesSequence | ApiServiceError> {\n\n    const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n    return res.pipe(\n        mergeMap(\n            // this would return an Observable of a PromiseObservable -> combine them into one Observable\n            this.processJSONLD\n        ),\n        mergeMap(\n            // return Observable of ReadResourcesSequence\n            (resourceResponse: object) => {\n                // convert JSON-LD into a ReadResourceSequence\n                const resSeq: ResourcesSequence = ConvertJSONLD.createResourcesSequenceFromJsonLD(resourceResponse);\n\n                // collect resource class Iris\n                const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n                const res0 = resSeq.resources[0];\n\n                // set file representation to display\n\n                const propKeys: string[] = Object.keys(res0.properties);\n                switch (true) {\n                    case propKeys.includes(KnoraConstants.hasStillImageFileValue):\n                        // res.fileRepresentationsToDisplay[0] = res.properties[KnoraConstants.hasStillImageFileValue];\n\n                        const imgRepresentations: StillImageRepresentation[] = [];\n\n                        const fileValues: ReadStillImageFileValue[] = res0.properties[KnoraConstants.hasStillImageFileValue] as ReadStillImageFileValue[];\n                        const imagesToDisplay: ReadStillImageFileValue[] = fileValues.filter((image) => {\n                            return !image.isPreview;\n                        });\n\n                        for (const img of imagesToDisplay) {\n\n                            const regions: Region[] = [];\n                            for (const incomingRegion of res0.incomingAnnotations) {\n\n                                // TODO: change return type in Region from ReadResource into Resource\n                                // const region = new Region(incomingRegion);\n\n                                // regions.push(region);\n\n                            }\n\n                            const stillImage = new StillImageRepresentation(img, regions);\n                            imgRepresentations.push(stillImage);\n\n                        }\n\n                        res0.fileRepresentationsToDisplay.stillImage = imgRepresentations;\n\n                        break;\n                    case propKeys.includes(KnoraConstants.hasMovingImageFileValue):\n                        //                            res0.fileRepresentationsToDisplay = res0.properties[KnoraConstants.hasMovingImageFileValue];\n                        break;\n                    case propKeys.includes(KnoraConstants.hasAudioFileValue):\n                        //                            res0.fileRepresentationsToDisplay = res0.properties[KnoraConstants.hasAudioFileValue];\n                        break;\n                    case propKeys.includes(KnoraConstants.hasDocumentFileValue):\n                        //                            res0.fileRepresentationsToDisplay = res0.properties[KnoraConstants.hasDocumentFileValue];\n                        break;\n                    case propKeys.includes(KnoraConstants.hasDDDFileValue):\n                        //                            res0.fileRepresentationsToDisplay = res0.properties[KnoraConstants.hasDDDFileValue];\n                        break;\n\n                    // TODO: TextFileValue\n\n                    default:\n                        // look for incoming fileRepresentation to display\n                        // get incoming stillImage files\n                        this._incomingService.getStillImageRepresentationsForCompoundResource(res0.id, 0).subscribe(\n                            (incomingFiles: ReadResourcesSequence) => {\n\n                                // console.log('incomingFiles', incomingFiles);\n\n                                if (incomingFiles.resources.length > 0) {\n                                    // update ontology information\n                                    resSeq.ontologyInformation.updateOntologyInformation(incomingFiles.ontologyInformation);\n\n\n                                    // set current offset\n                                    // this.incomingStillImageRepresentationCurrentOffset = offset;\n\n                                    // TODO: implement prepending of StillImageRepresentations when moving to the left (getting previous pages)\n                                    // TODO: append existing images to response and then assign response to `this.resource.incomingStillImageRepresentations`\n                                    // TODO: maybe we have to support non consecutive arrays (sparse arrays)\n\n                                    // append incomingImageRepresentations.resources to this.resource.incomingStillImageRepresentations\n\n                                    Array.prototype.push.apply(res0.incomingFileRepresentations, incomingFiles.resources);\n                                    // Array.prototype.push.apply(resSeq.resources[0].incomingFileRepresentations, incomingImageRepresentations.resources);\n\n                                    const incomingImgRepresentations: StillImageRepresentation[] = [];\n\n                                    for (const inRes of incomingFiles.resources) {\n\n\n\n                                        const incomingFileValues: ReadStillImageFileValue[] = inRes.properties[KnoraConstants.hasStillImageFileValue] as ReadStillImageFileValue[];\n                                        const incomingImagesToDisplay: ReadStillImageFileValue[] = incomingFileValues.filter((image) => {\n                                            return !image.isPreview;\n                                        });\n\n                                        for (const img of incomingImagesToDisplay) {\n\n                                            const regions: Region[] = [];",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>for (const incomingRegion of inRes.incomingAnnotations) {</p>\n<pre><code>                                                // TODO: change return type in Region from ReadResource into Resource\n                                                // const region = new Region(incomingRegion);\n\n                                                // regions.push(incomingRegion);\n\n                                            }</code></pre>",
      "summary": "<p>for (const incomingRegion of inRes.incomingAnnotations) {</p>",
      "body": "<pre><code>                                                // TODO: change return type in Region from ReadResource into Resource\n                                                // const region = new Region(incomingRegion);\n\n                                                // regions.push(incomingRegion);\n\n                                            }</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 147,
    "codeStart": 158,
    "code": "const stillImage = new StillImageRepresentation(img, regions);\nincomingImgRepresentations.push(stillImage);\n\n                                            }\n\n                                            res0.fileRepresentationsToDisplay.stillImage = incomingImgRepresentations;\n\n                                        }\n\n\n                                        // prepare attached image files to be displayed\n                                        // BeolResource.collectImagesAndRegionsForResource(this.resource);\n                                    }\n                                },\n                                (error: any) => {\n                                    console.error(error);\n                                }\n                            );\n\n                        // do the same for all other incoming file representations\n                        // TODO: get incoming movingImage files\n\n                        // TODO: get incoming audio files\n\n                        // TODO: get incoming document files\n\n                        // TODO: get incoming text files\n\n                        // TODO: get ddd images files\n                    }\n\n\n                    // resource.properties[KnoraConstants.hasStillImageFileValue]\n\n\n                    // get incoming links\n                    this._incomingService.getIncomingLinks(resSeq.resources[0].id, 0).subscribe(\n                        (incomingRes: ResourcesSequence) => {\n                            // update ontology information\n                            resSeq.ontologyInformation.updateOntologyInformation(incomingRes.ontologyInformation);\n\n                            // Append elements incomingResources to this.sequence.incomingLinks\n                            Array.prototype.push.apply(resSeq.resources[0].incomingLinks, incomingRes.resources);\n                        }\n                    );\n\n                    // get incoming annotations\n\n\n                    // request information about resource classes\n                    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                        map(\n                            (ontoInfo: OntologyInformation) => {\n                                // add ontology information to ReadResourceSequence\n                                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n\n                                // console.log('resSeq -- resourceServie', resSeq);\n\n                                return resSeq;\n                            }\n                        )\n                    );\n                }\n\n            )\n        );\n\n        // let resSeq: Observable<ResourcesSequence>;",
    "ctx": {
      "type": "declaration",
      "name": "stillImage",
      "value": "new StillImageRepresentation(img, regions)",
      "string": "stillImage"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>this.getResourcesSequence(iri).subscribe(<br />\n(sequence: ResourcesSequence) =&gt; {</p>\n<pre><code>            // resSeq = sequence;\n\n            /* pipe(\n                map((result: ApiServiceResult) =&gt; result.getBody(GroupsResponse).groups),\n                catchError(this.handleJsonError)\n            );\n\n            resSeq.pipe(\n                map((seq: ResourcesSequence) =&gt; sequence),\n                catchError(this.handleJsonError)\n            ); *\n\n            // get incoming links\n            this._incomingService.getIncomingLinks(sequence.resources[0].id, 0).subscribe(\n                (incomingResources: ResourcesSequence) =&gt; {\n                    // update ontology information\n                    sequence.ontologyInformation.updateOntologyInformation(incomingResources.ontologyInformation);\n\n                    // Append elements incomingResources to this.sequence.incomingLinks\n                    Array.prototype.push.apply(sequence.resources[0].incomingLinks, incomingResources.resources);\n\n                    // if callback is given, execute function with the amount of incoming resources as the parameter\n                    /* TODO: what is callback? Find a solution\n                    if (callback !== undefined) {\n                        callback(incomingResources.resources.length);\n                    }\n\n\n                },\n                (error: any) =&gt; {\n                    console.error(error);\n                }\n            );\n\n            // get incoming annotations\n\n            // get incoming filerepresentations\n\n\n\n        },\n        (error: ApiServiceError) =&gt; {\n            console.error(error);\n            return error;\n        }\n    );\n\n\n    return resSeq;</code></pre>",
      "summary": "<p>this.getResourcesSequence(iri).subscribe(<br />\n(sequence: ResourcesSequence) =&gt; {</p>",
      "body": "<pre><code>            // resSeq = sequence;\n\n            /* pipe(\n                map((result: ApiServiceResult) =&gt; result.getBody(GroupsResponse).groups),\n                catchError(this.handleJsonError)\n            );\n\n            resSeq.pipe(\n                map((seq: ResourcesSequence) =&gt; sequence),\n                catchError(this.handleJsonError)\n            ); *\n\n            // get incoming links\n            this._incomingService.getIncomingLinks(sequence.resources[0].id, 0).subscribe(\n                (incomingResources: ResourcesSequence) =&gt; {\n                    // update ontology information\n                    sequence.ontologyInformation.updateOntologyInformation(incomingResources.ontologyInformation);\n\n                    // Append elements incomingResources to this.sequence.incomingLinks\n                    Array.prototype.push.apply(sequence.resources[0].incomingLinks, incomingResources.resources);\n\n                    // if callback is given, execute function with the amount of incoming resources as the parameter\n                    /* TODO: what is callback? Find a solution\n                    if (callback !== undefined) {\n                        callback(incomingResources.resources.length);\n                    }\n\n\n                },\n                (error: any) =&gt; {\n                    console.error(error);\n                }\n            );\n\n            // get incoming annotations\n\n            // get incoming filerepresentations\n\n\n\n        },\n        (error: ApiServiceError) =&gt; {\n            console.error(error);\n            return error;\n        }\n    );\n\n\n    return resSeq;</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 227,
    "codeStart": 283,
    "code": "}\n\nprivate getResourcesSequence(iri: string): Observable<ResourcesSequence | ApiServiceError> {\n    const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n    return res.pipe(\n        mergeMap(\n            // this would return an Observable of a PromiseObservable -> combine them into one Observable\n            this.processJSONLD\n        ),\n        mergeMap(\n            // return Observable of ReadResourcesSequence\n            (resourceResponse: object) => {\n                // convert JSON-LD into a ReadResourceSequence\n                const resSeq: ResourcesSequence = ConvertJSONLD.createResourcesSequenceFromJsonLD(resourceResponse);\n\n                // collect resource class Iris\n                const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n\n\n                // request information about resource classes\n                return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                    map(\n                        (ontoInfo: OntologyInformation) => {\n                            // add ontology information to ReadResourceSequence\n                            resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                            return resSeq;\n                        }\n                    )\n                );\n            }\n        )\n    );\n}\n\n\nrequestIncomingResources(sequence: ResourcesSequence): void {\n\n    // make sure that this.sequence has been initialized correctly\n    if (sequence === undefined) {\n        return;\n    }\n\n    // request incoming sequences in case of movingImage and audio\n\n    // request incoming regions in case of stillImage and dddImage\n    if (sequence.resources[0].properties[KnoraConstants.hasStillImageFileValue]) {\n        // TODO: check if resources is a StillImageRepresentation using the ontology responder (support for subclass relations required)\n        // the resource is a StillImageRepresentation, check if there are regions pointing to it\n\n        // this.getIncomingRegions(0);\n\n    } else {\n        // this resource is not a StillImageRepresentation\n        // check if there are StillImageRepresentations pointing to this resource\n\n        // this gets the first page of incoming StillImageRepresentations\n        // more pages may be requested by [[this.viewer]].\n        // TODO: for now, we begin with offset 0. This may have to be changed later (beginning somewhere in a collection)\n        // this.getIncomingStillImageRepresentations(0);\n    }\n\n    // check for incoming links for the current resource\n    // this.getIncomingLinks(0);\n\n\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "Use **getResourcesSequence** instead \nGiven the Iri, requests the representation of a resource as a `ReadResourceSequence`.",
        "html": "<p>Use <strong>getResourcesSequence</strong> instead<br />\nGiven the Iri, requests the representation of a resource as a <code>ReadResourceSequence</code>.</p>"
      },
      {
        "type": "param",
        "string": "{string} iri Iri of the resource (not yet URL encoded).",
        "name": "iri",
        "description": "<p>Iri of the resource (not yet URL encoded).</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "{Observable<ReadResourcesSequence>}",
        "types": [
          "Observable.<ReadResourcesSequence>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<a href=\"ReadResourcesSequence.html\">ReadResourcesSequence</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Observable<ReadResourcesSequence>}</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 352,
    "codeStart": 360,
    "code": "getReadResource(iri: string): Observable<ReadResourcesSequence | ApiServiceError> {\n    const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n    // TODO: handle case of an ApiServiceError\n\n    return res.pipe(\n        mergeMap(\n            // this would return an Observable of a PromiseObservable -> combine them into one Observable\n            this.processJSONLD\n        ),\n        mergeMap(\n            // return Observable of ReadResourcesSequence\n            (resourceResponse: object) => {\n                // convert JSON-LD into a ReadResourceSequence\n                const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n                // collect resource class Iris\n                const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n                // request information about resource classes\n                return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                    map(\n                        (ontoInfo: OntologyInformation) => {\n                            // add ontology information to ReadResourceSequence\n                            resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                            return resSeq;\n                        }\n                    )\n                );\n            }\n        )\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getReadResource",
      "string": "getReadResource()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} iri",
        "name": "iri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} iri</p>"
      }
    ],
    "description": {
      "full": "<p>Get a resource by IRI and return the json-ld result;<br />\nit will be used for the request body object in delete and erase resource</p>",
      "summary": "<p>Get a resource by IRI and return the json-ld result;<br />\nit will be used for the request body object in delete and erase resource</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 393,
    "codeStart": 399
  },
  {
    "tags": [],
    "description": {
      "full": "<p>getResourceAsJsonLd(iri: string): Observable<any> {</p>\n<pre><code>    return this.httpGet('/v2/resources/' + encodeURIComponent(iri)).pipe(\n        map((result: ApiServiceResult) =&gt; result.body),\n        catchError(this.handleJsonError)\n    );\n\n}</code></pre>",
      "summary": "<p>getResourceAsJsonLd(iri: string): Observable<any> {</p>",
      "body": "<pre><code>    return this.httpGet('/v2/resources/' + encodeURIComponent(iri)).pipe(\n        map((result: ApiServiceResult) =&gt; result.body),\n        catchError(this.handleJsonError)\n    );\n\n}</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 399,
    "codeStart": 410,
    "code": "// TODO: post, put, delete",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} iri Iri of the resource",
        "name": "iri",
        "description": "<p>Iri of the resource</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [comment] Specifies a comment to be attached to the resource, explaining why it has been marked as deleted. Will be ignored if param erase is true.",
        "name": "[comment]",
        "description": "<p>Specifies a comment to be attached to the resource, explaining why it has been marked as deleted. Will be ignored if param erase is true.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} [erase] Delete completely from triplestore. Default false.",
        "name": "[erase]",
        "description": "<p>Delete completely from triplestore. Default false.</p>",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Delete resource</p>\n<p>Knora does not normally delete resources; instead, it marks them as deleted, which means that they do not appear in normal query results.</p>",
      "summary": "<p>Delete resource</p>",
      "body": "<p>Knora does not normally delete resources; instead, it marks them as deleted, which means that they do not appear in normal query results.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 413,
    "codeStart": 422
  },
  {
    "tags": [],
    "description": {
      "full": "<p>deleteResource(iri: string, comment: string = '', erase: boolean = false) {<br />\nconst path: string = (erase ? '/v2/resources/erase' : '/v2/resources/delete');</p>\n<pre><code>    // get resource first to have the knora-api:lastModificationDate\n    this.getResourceAsJsonLd(iri).subscribe(\n        (result: any) =&gt; {\n            const requestBody: any = {\n                '@id': iri,\n                '@type': result['@type'],\n                '@context': result['@context']\n            };\n\n            // the resource exists; get the info needed in the request body\n            if (result['knora-api:lastModificationDate']) {\n                requestBody['knora-api:lastModificationDate'] = result['knora-api:lastModificationDate'];\n            }\n\n            if (comment.length &gt; 0 &amp;&amp; !erase) {\n                requestBody['knora-api:deleteComment'] = comment;\n            }\n\n            // send the request body to the delete route\n            this.httpPost(path, requestBody).subscribe(\n                (resp: any) =&gt; {\n                    // TODO: return something here\n                    // console.log(resp);\n                },\n                (err: any) =&gt; {\n                    console.error(err);\n                }\n            );\n\n        },\n        (error: ApiServiceError) =&gt; {\n            console.error('failed to get resource', error);\n        }\n    );\n\n}</code></pre>",
      "summary": "<p>deleteResource(iri: string, comment: string = '', erase: boolean = false) {<br />\nconst path: string = (erase ? '/v2/resources/erase' : '/v2/resources/delete');</p>",
      "body": "<pre><code>    // get resource first to have the knora-api:lastModificationDate\n    this.getResourceAsJsonLd(iri).subscribe(\n        (result: any) =&gt; {\n            const requestBody: any = {\n                '@id': iri,\n                '@type': result['@type'],\n                '@context': result['@context']\n            };\n\n            // the resource exists; get the info needed in the request body\n            if (result['knora-api:lastModificationDate']) {\n                requestBody['knora-api:lastModificationDate'] = result['knora-api:lastModificationDate'];\n            }\n\n            if (comment.length &gt; 0 &amp;&amp; !erase) {\n                requestBody['knora-api:deleteComment'] = comment;\n            }\n\n            // send the request body to the delete route\n            this.httpPost(path, requestBody).subscribe(\n                (resp: any) =&gt; {\n                    // TODO: return something here\n                    // console.log(resp);\n                },\n                (err: any) =&gt; {\n                    console.error(err);\n                }\n            );\n\n        },\n        (error: ApiServiceError) =&gt; {\n            console.error('failed to get resource', error);\n        }\n    );\n\n}</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 422,
    "codeStart": 463,
    "code": "// TODO: combine the erase method with the delete method",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} iri Iri of the resource",
        "name": "iri",
        "description": "<p>Iri of the resource</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} type Resource class",
        "name": "type",
        "description": "<p>Resource class</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Erase resource (from triplestore)</p>",
      "summary": "<p>Erase resource (from triplestore)</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 464,
    "codeStart": 470
  },
  {
    "tags": [],
    "description": {
      "full": "<p>eraseResource(iri: string) {<br />\n// get resource first to have the knora-api:lastModificationDate<br />\nthis.getResourceAsJsonLd(iri).subscribe(<br />\n(result: any) =&gt; {<br />\nconst requestBody: any = {<br />\n'@id': iri,<br />\n'@type': result['@type'],<br />\n'@context': result['@context']<br />\n};</p>\n<pre><code>                // the resource exists; get the info needed in the request body\n                if (result['knora-api:lastModificationDate']) {\n                    requestBody['knora-api:lastModificationDate'] = result['knora-api:lastModificationDate'];\n                }\n\n                // send the request body to the delete route\n                this.httpPost('/v2/resources/erase', requestBody).subscribe(\n                    (resp: any) =&gt; {\n                        // TODO: return something here\n                        // console.log(resp);\n                    },\n                    (err: any) =&gt; {\n                        console.error(err);\n                    }\n                );\n\n            },\n            (error: ApiServiceError) =&gt; {\n                console.error('failed to get resource', error);\n            }\n        );\n\n    }</code></pre>",
      "summary": "<p>eraseResource(iri: string) {<br />\n// get resource first to have the knora-api:lastModificationDate<br />\nthis.getResourceAsJsonLd(iri).subscribe(<br />\n(result: any) =&gt; {<br />\nconst requestBody: any = {<br />\n'@id': iri,<br />\n'@type': result['@type'],<br />\n'@context': result['@context']<br />\n};</p>",
      "body": "<pre><code>                // the resource exists; get the info needed in the request body\n                if (result['knora-api:lastModificationDate']) {\n                    requestBody['knora-api:lastModificationDate'] = result['knora-api:lastModificationDate'];\n                }\n\n                // send the request body to the delete route\n                this.httpPost('/v2/resources/erase', requestBody).subscribe(\n                    (resp: any) =&gt; {\n                        // TODO: return something here\n                        // console.log(resp);\n                    },\n                    (err: any) =&gt; {\n                        console.error(err);\n                    }\n                );\n\n            },\n            (error: ApiServiceError) =&gt; {\n                console.error('failed to get resource', error);\n            }\n        );\n\n    }</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 470,
    "codeStart": 505,
    "code": "}",
    "ctx": false
  }
]