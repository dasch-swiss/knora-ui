[
  {
    "tags": [],
    "description": {
      "full": "<p>Request information about lists from Knora.</p>",
      "summary": "<p>Request information about lists from Knora.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 7,
    "codeStart": 10,
    "code": "@Injectable({\n    providedIn: 'root'\n})\nexport class ListsService extends ApiService {\n\n    private path: string = '/admin/lists';\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [projectIri]",
        "name": "[projectIri]",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} [projectIri]</p>"
      },
      {
        "type": "returns",
        "string": "Observable<ListNode[]>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable&lt;ListNode[]&gt;</p>"
      }
    ],
    "description": {
      "full": "<p>Returns a list of all lists.</p>",
      "summary": "<p>Returns a list of all lists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 21,
    "codeStart": 27,
    "code": "getLists(projectIri?: string): Observable<ListNode[]> {\n    let newPath = this.path;\n    if (projectIri) {\n        newPath += '?projectIri=' + encodeURIComponent(projectIri);\n    }\n    return this.httpGet(newPath).pipe(\n        map((result: ApiServiceResult) => result.getBody(ListsResponse).lists),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getLists",
      "string": "getLists()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} listIri",
        "name": "listIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} listIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<List>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<List></p>"
      }
    ],
    "description": {
      "full": "<p>Return a list object.</p>",
      "summary": "<p>Return a list object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 38,
    "codeStart": 44,
    "code": "getList(listIri: string): Observable<List> {\n    return this.httpGet(this.path + '/' + encodeURIComponent(listIri)).pipe(\n        map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getList",
      "string": "getList()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} listIri",
        "name": "listIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} listIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<ListInfo>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ListInfo></p>"
      }
    ],
    "description": {
      "full": "<p>Return a list info object.</p>",
      "summary": "<p>Return a list info object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 51,
    "codeStart": 57,
    "code": "getListInfo(listIri: string): Observable<ListInfo> {\n    return this.httpGet(this.path + '/infos/' + encodeURIComponent(listIri)).pipe(\n        map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getListInfo",
      "string": "getListInfo()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} nodeIri",
        "name": "nodeIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} nodeIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<ListNode>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ListNode></p>"
      }
    ],
    "description": {
      "full": "<p>Return a list node info object.</p>",
      "summary": "<p>Return a list node info object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 64,
    "codeStart": 70,
    "code": "getListNodeInfo(nodeIri: string): Observable<ListNode> {\n    return this.httpGet(this.path + '/nodes/' + encodeURIComponent(nodeIri)).pipe(\n        map((result: ApiServiceResult) => result.getBody(ListNodeResponse).nodeinfo),\n        catchError(this.handleJsonError)\n    );\n}\n\n\n// ------------------------------------------------------------------------\n// POST\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "getListNodeInfo",
      "string": "getListNodeInfo()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{ListCreatePayload} payload",
        "name": "payload",
        "description": "",
        "types": [
          "ListCreatePayload"
        ],
        "typesDescription": "<a href=\"ListCreatePayload.html\">ListCreatePayload</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ListCreatePayload} payload</p>"
      },
      {
        "type": "returns",
        "string": "Observable<List>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<List></p>"
      }
    ],
    "description": {
      "full": "<p>Create new list.</p>",
      "summary": "<p>Create new list.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 82,
    "codeStart": 88,
    "code": "createList(payload: ListCreatePayload): Observable<List> {\n    return this.httpPost(this.path, payload).pipe(\n        map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "createList",
      "string": "createList()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} listIri",
        "name": "listIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} listIri</p>"
      },
      {
        "type": "param",
        "string": "{ListNodeUpdatePayload} payload",
        "name": "payload",
        "description": "",
        "types": [
          "ListNodeUpdatePayload"
        ],
        "typesDescription": "<a href=\"ListNodeUpdatePayload.html\">ListNodeUpdatePayload</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ListNodeUpdatePayload} payload</p>"
      },
      {
        "type": "returns",
        "string": "Observable<ListNode>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ListNode></p>"
      }
    ],
    "description": {
      "full": "<p>Create new list node.</p>",
      "summary": "<p>Create new list node.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 95,
    "codeStart": 102,
    "code": "createListItem(listIri: string, payload: ListNodeUpdatePayload): Observable<ListNode> {\n    return this.httpPost(this.path + '/' + encodeURIComponent(listIri), payload).pipe(\n        map((result: ApiServiceResult) => result.getBody(ListNodeResponse).nodeinfo),\n        catchError(this.handleJsonError)\n    );\n}\n\n\n// ------------------------------------------------------------------------\n// PUT\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "createListItem",
      "string": "createListItem()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{ListInfoUpdatePayload} payload",
        "name": "payload",
        "description": "",
        "types": [
          "ListInfoUpdatePayload"
        ],
        "typesDescription": "<a href=\"ListInfoUpdatePayload.html\">ListInfoUpdatePayload</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ListInfoUpdatePayload} payload</p>"
      },
      {
        "type": "returns",
        "string": "Observable<ListInfo>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ListInfo></p>"
      }
    ],
    "description": {
      "full": "<p>Edit list data.</p>",
      "summary": "<p>Edit list data.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 114,
    "codeStart": 120,
    "code": "updateListInfo(payload: ListInfoUpdatePayload): Observable<ListInfo> {\n    return this.httpPut(this.path + '/infos/' + encodeURIComponent(payload.listIri), payload).pipe(\n        map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n        catchError(this.handleJsonError)\n    );\n}\n}",
    "ctx": {
      "type": "method",
      "name": "updateListInfo",
      "string": "updateListInfo()"
    }
  }
]