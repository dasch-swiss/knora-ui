[
  {
    "tags": [],
    "description": {
      "full": "<p>This service uses the Knora admin API and handles all user data.</p>",
      "summary": "<p>This service uses the Knora admin API and handles all user data.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 14,
    "codeStart": 17,
    "code": "@Injectable({\n    providedIn: 'root'\n})\nexport class UsersService extends ApiService {\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "returns",
        "string": "Observable<User[]>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable&lt;User[]&gt;</p>"
      }
    ],
    "description": {
      "full": "<p>Returns a list of all users.</p>",
      "summary": "<p>Returns a list of all users.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 25,
    "codeStart": 30,
    "code": "getAllUsers(): Observable<User[]> {\n    return this.httpGet('/admin/users').pipe(\n        map((result: ApiServiceResult) => result.getBody(UsersResponse).users),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getAllUsers",
      "string": "getAllUsers()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} identifier - Get user by username, email or by iri",
        "name": "identifier",
        "description": "<ul>\n<li>Get user by username, email or by iri</li>\n</ul>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Get user by username, email or by iri.</p>",
      "summary": "<p>Get user by username, email or by iri.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 37,
    "codeStart": 45,
    "code": "private getUser(identifier: string, identifierType: String): Observable<User> {\n    const path = '/admin/users/' + identifierType + '/' + encodeURIComponent(identifier);\n    return this.httpGet(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} iri",
        "name": "iri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} iri</p>"
      },
      {
        "type": "returns",
        "string": "{Observable<User>}",
        "types": [
          "Observable.<User>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<a href=\"User.html\">User</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Observable<User>}</p>"
      }
    ],
    "description": {
      "full": "<p>Get user by IRI</p>",
      "summary": "<p>Get user by IRI</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 53,
    "codeStart": 59,
    "code": "getUserByIri(iri: string): Observable<User> {\n    return this.getUser(iri, 'iri');\n}",
    "ctx": {
      "type": "method",
      "name": "getUserByIri",
      "string": "getUserByIri()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} email",
        "name": "email",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} email</p>"
      },
      {
        "type": "returns",
        "string": "{Observable<User>}",
        "types": [
          "Observable.<User>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<a href=\"User.html\">User</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Observable<User>}</p>"
      }
    ],
    "description": {
      "full": "<p>Get user by email</p>",
      "summary": "<p>Get user by email</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 63,
    "codeStart": 69,
    "code": "getUserByEmail(email: string): Observable<User> {\n    return this.getUser(email, 'email');\n}",
    "ctx": {
      "type": "method",
      "name": "getUserByEmail",
      "string": "getUserByEmail()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} username",
        "name": "username",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} username</p>"
      },
      {
        "type": "returns",
        "string": "{Observable<User>}",
        "types": [
          "Observable.<User>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<a href=\"User.html\">User</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Observable<User>}</p>"
      }
    ],
    "description": {
      "full": "<p>Get user by username.</p>",
      "summary": "<p>Get user by username.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 73,
    "codeStart": 79,
    "code": "getUserByUsername(username: string): Observable<User> {\n    return this.getUser(username, 'username');\n}",
    "ctx": {
      "type": "method",
      "name": "getUserByUsername",
      "string": "getUserByUsername()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable</p>"
      }
    ],
    "description": {
      "full": "<p>Get all groups, where the user is member of</p>",
      "summary": "<p>Get all groups, where the user is member of</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 83,
    "codeStart": 89,
    "code": "getUsersGroupMemberships(userIri: string): Observable<Group[]> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships';\n    return this.httpGet(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n        catchError(this.handleJsonError)\n    );\n\n}\n\n// ------------------------------------------------------------------------\n// POST\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "getUsersGroupMemberships",
      "string": "getUsersGroupMemberships()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{any} data",
        "name": "data",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} data</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Create new user.</p>",
      "summary": "<p>Create new user.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 102,
    "codeStart": 108,
    "code": "createUser(data: any): Observable<User> {\n    const path = '/admin/users';\n    return this.httpPost(path, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "createUser",
      "string": "createUser()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} projectIri",
        "name": "projectIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} projectIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Add user to a project.</p>",
      "summary": "<p>Add user to a project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 116,
    "codeStart": 123,
    "code": "addUserToProject(userIri: string, projectIri: string): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n    return this.httpPost(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "addUserToProject",
      "string": "addUserToProject()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} projectIri",
        "name": "projectIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} projectIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Remove user from project.</p>",
      "summary": "<p>Remove user from project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 131,
    "codeStart": 138,
    "code": "removeUserFromProject(userIri: string, projectIri: string): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n    return this.httpDelete(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "removeUserFromProject",
      "string": "removeUserFromProject()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} projectIri",
        "name": "projectIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} projectIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Add user to an admin project.</p>",
      "summary": "<p>Add user to an admin project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 146,
    "codeStart": 153,
    "code": "addUserToProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n    return this.httpPost(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "addUserToProjectAdmin",
      "string": "addUserToProjectAdmin()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} projectIri",
        "name": "projectIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} projectIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Delete user of an admin project.</p>",
      "summary": "<p>Delete user of an admin project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 161,
    "codeStart": 168,
    "code": "removeUserFromProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n    return this.httpDelete(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "removeUserFromProjectAdmin",
      "string": "removeUserFromProjectAdmin()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "userIri",
        "name": "userIri",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>userIri</p>"
      },
      {
        "type": "param",
        "string": "groupIri",
        "name": "groupIri",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>groupIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>add user to project specific group</p>",
      "summary": "<p>add user to project specific group</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 176,
    "codeStart": 183,
    "code": "addUserToGroup(userIri: string, groupIri: string): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n    return this.httpPost(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n\n}",
    "ctx": {
      "type": "method",
      "name": "addUserToGroup",
      "string": "addUserToGroup()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "userIri",
        "name": "userIri",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>userIri</p>"
      },
      {
        "type": "param",
        "string": "groupIri",
        "name": "groupIri",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>groupIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>remove user from project specific group</p>",
      "summary": "<p>remove user from project specific group</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 192,
    "codeStart": 199,
    "code": "removeUserFromGroup(userIri: string, groupIri: string): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n    return this.httpDelete(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n\n}\n\n\n// ------------------------------------------------------------------------\n// PUT\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "removeUserFromGroup",
      "string": "removeUserFromGroup()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Add user to the admin system.</p>",
      "summary": "<p>Add user to the admin system.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 214,
    "codeStart": 220,
    "code": "addUserToSystemAdmin(userIri: string): Observable<User> {\n    const data = {\n        'newSystemAdminMembershipStatus': true\n    };\n\n    return this.updateUserSystemAdmin(userIri, data);\n\n}",
    "ctx": {
      "type": "method",
      "name": "addUserToSystemAdmin",
      "string": "addUserToSystemAdmin()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "userIri",
        "name": "userIri",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>userIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Remove user from the admin system.</p>",
      "summary": "<p>Remove user from the admin system.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 229,
    "codeStart": 234,
    "code": "removeUserFromSystemAdmin(userIri: string): Observable<User> {\n    const data = {\n        'newSystemAdminMembershipStatus': false\n    };\n\n    return this.updateUserSystemAdmin(userIri, data);\n}",
    "ctx": {
      "type": "method",
      "name": "removeUserFromSystemAdmin",
      "string": "removeUserFromSystemAdmin()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "userIri",
        "name": "userIri",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>userIri</p>"
      },
      {
        "type": "param",
        "string": "data",
        "name": "data",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>data</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Update user system admin membership</p>",
      "summary": "<p>Update user system admin membership</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 242,
    "codeStart": 251,
    "code": "private updateUserSystemAdmin(userIri: string, data: any): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/SystemAdmin';\n    return this.httpPut(path, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Activate user.</p>",
      "summary": "<p>Activate user.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 260,
    "codeStart": 266,
    "code": "activateUser(userIri: string): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Status';\n\n    const data: any = {\n        status: true\n    };\n\n    return this.httpPut(path, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "activateUser",
      "string": "activateUser()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} oldPassword",
        "name": "oldPassword",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} oldPassword</p>"
      },
      {
        "type": "param",
        "string": "{string} newPassword",
        "name": "newPassword",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} newPassword</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Update own password.</p>",
      "summary": "<p>Update own password.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 280,
    "codeStart": 288,
    "code": "updateOwnPassword(userIri: string, oldPassword: string, newPassword: string): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n    const data = {\n        newPassword: newPassword,\n        requesterPassword: oldPassword\n    };\n\n    return this.httpPut(path, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "updateOwnPassword",
      "string": "updateOwnPassword()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} requesterPassword",
        "name": "requesterPassword",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} requesterPassword</p>"
      },
      {
        "type": "param",
        "string": "{string} newPassword",
        "name": "newPassword",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} newPassword</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Update password of another user (not own).</p>",
      "summary": "<p>Update password of another user (not own).</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 302,
    "codeStart": 310,
    "code": "updateUsersPassword(userIri: string, requesterPassword: string, newPassword: string): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n    const data = {\n        newPassword: newPassword,\n        requesterPassword: requesterPassword\n    };\n\n    return this.httpPut(path, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "updateUsersPassword",
      "string": "updateUsersPassword()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "userIri",
        "name": "userIri",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>userIri</p>"
      },
      {
        "type": "param",
        "string": "data",
        "name": "data",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>data</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Update basic user information: given name, family name</p>",
      "summary": "<p>Update basic user information: given name, family name</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 324,
    "codeStart": 330,
    "code": "updateBasicUserInformation(userIri: string, data: any): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/BasicUserInformation';\n\n    return this.httpPut(path, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}\n\n\n// ------------------------------------------------------------------------\n// DELETE\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "updateBasicUserInformation",
      "string": "updateBasicUserInformation()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Delete / deactivate user.</p>",
      "summary": "<p>Delete / deactivate user.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 344,
    "codeStart": 350,
    "code": "deleteUser(userIri: string): Observable<User> {\n    const path = '/admin/users/iri/' + encodeURIComponent(userIri);\n    return this.httpDelete(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n\n}\n\n\n}",
    "ctx": {
      "type": "method",
      "name": "deleteUser",
      "string": "deleteUser()"
    }
  }
]