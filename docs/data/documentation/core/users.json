[
  {
    "tags": [],
    "description": {
      "full": "<p>This service uses the Knora admin API and handles all user data.</p>",
      "summary": "<p>This service uses the Knora admin API and handles all user data.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 12,
    "codeStart": 15,
    "code": "@Injectable({\n    providedIn: 'root'\n})\nexport class UsersService extends ApiService {\n\n    usersUrl: string = this.config.api + '/admin/users';\n\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "returns",
        "string": "Observable<User[]>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable&lt;User[]&gt;</p>"
      }
    ],
    "description": {
      "full": "<p>Returns a list of all users.</p>",
      "summary": "<p>Returns a list of all users.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 27,
    "codeStart": 32,
    "code": "getAllUsers(): Observable<User[]> {\n    return this.httpGet('/admin/users').pipe(\n        map((result: ApiServiceResult) => result.getBody(UsersResponse).users),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getAllUsers",
      "string": "getAllUsers()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} identifier - Get user by username, email or by iri",
        "name": "identifier",
        "description": "<ul>\n<li>Get user by username, email or by iri</li>\n</ul>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Get user by username, email or by iri.</p>",
      "summary": "<p>Get user by username, email or by iri.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 39,
    "codeStart": 45,
    "code": "getUser(identifier: string): Observable<User> {\n    const path = '/admin/users/' + encodeURIComponent(identifier);\n    return this.httpGet(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getUser",
      "string": "getUser()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} email",
        "name": "email",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} email</p>"
      },
      {
        "type": "returns",
        "string": "{Observable<User>}",
        "types": [
          "Observable.<User>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<a href=\"User.html\">User</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Observable<User>}</p>"
      }
    ],
    "description": {
      "full": "<p>Deprecated! Please use getUser(identifier: string) only!<br />\nGet user by email</p>",
      "summary": "<p>Deprecated! Please use getUser(identifier: string) only!<br />\nGet user by email</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 53,
    "codeStart": 62,
    "code": "getUserByEmail(email: string): Observable<User> {\n    return this.getUser(email);\n}",
    "ctx": {
      "type": "method",
      "name": "getUserByEmail",
      "string": "getUserByEmail()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} iri",
        "name": "iri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} iri</p>"
      },
      {
        "type": "returns",
        "string": "{Observable<User>}",
        "types": [
          "Observable.<User>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<a href=\"User.html\">User</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Observable<User>}</p>"
      }
    ],
    "description": {
      "full": "<p>Deprecated! Please use getUser(identifier: string) only!</p>",
      "summary": "<p>Deprecated! Please use getUser(identifier: string) only!</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 66,
    "codeStart": 74,
    "code": "getUserByIri(iri: string): Observable<User> {\n    return this.getUser(iri);\n}\n\n// ------------------------------------------------------------------------\n// POST\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "getUserByIri",
      "string": "getUserByIri()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{any} data",
        "name": "data",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} data</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Create new user.</p>",
      "summary": "<p>Create new user.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 82,
    "codeStart": 88,
    "code": "createUser(data: any): Observable<User> {\n    const path = '/admin/users';\n    return this.httpPost(path, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "createUser",
      "string": "createUser()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} projectIri",
        "name": "projectIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} projectIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Add user to a project.</p>",
      "summary": "<p>Add user to a project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 96,
    "codeStart": 103,
    "code": "addUserToProject(userIri: string, projectIri: string): Observable<User> {\n    const path = '/admin/users/projects/' + encodeURIComponent(userIri) + '/' + encodeURIComponent(projectIri);\n    return this.httpPost(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "addUserToProject",
      "string": "addUserToProject()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} projectIri",
        "name": "projectIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} projectIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Add user to an admin project.</p>",
      "summary": "<p>Add user to an admin project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 111,
    "codeStart": 118,
    "code": "addUserToProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n    const path = '/admin/users/projects-admin/' + encodeURIComponent(userIri) + '/' + encodeURIComponent(projectIri);\n    return this.httpPost(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "addUserToProjectAdmin",
      "string": "addUserToProjectAdmin()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} projectIri",
        "name": "projectIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} projectIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Delete user of an admin project.</p>",
      "summary": "<p>Delete user of an admin project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 126,
    "codeStart": 133,
    "code": "removeUserFromProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n    const path = '/admin/users/projects-admin/' + encodeURIComponent(userIri) + '/' + encodeURIComponent(projectIri);\n    return this.httpDelete(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}\n\n\n// ------------------------------------------------------------------------\n// PUT\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "removeUserFromProjectAdmin",
      "string": "removeUserFromProjectAdmin()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{any} data",
        "name": "data",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} data</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Add user to the admin system.</p>",
      "summary": "<p>Add user to the admin system.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 147,
    "codeStart": 154,
    "code": "addUserToSystemAdmin(userIri: string, data: any): Observable<User> {\n    const path = '/admin/users/' + encodeURIComponent(userIri);\n    return this.httpPut(path, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "addUserToSystemAdmin",
      "string": "addUserToSystemAdmin()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Activate user.</p>",
      "summary": "<p>Activate user.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 162,
    "codeStart": 168,
    "code": "activateUser(userIri: string): Observable<User> {\n    const data: any = {\n        status: true\n    };\n    return this.updateUser(userIri, data);\n}",
    "ctx": {
      "type": "method",
      "name": "activateUser",
      "string": "activateUser()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} oldPassword",
        "name": "oldPassword",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} oldPassword</p>"
      },
      {
        "type": "param",
        "string": "{string} newPassword",
        "name": "newPassword",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} newPassword</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Update own password.</p>",
      "summary": "<p>Update own password.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 176,
    "codeStart": 184,
    "code": "updateOwnPassword(userIri: string, oldPassword: string, newPassword: string): Observable<User> {\n    const data = {\n        newPassword: newPassword,\n        requesterPassword: oldPassword\n    };\n    return this.updateUser(userIri, data);\n}",
    "ctx": {
      "type": "method",
      "name": "updateOwnPassword",
      "string": "updateOwnPassword()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} requesterPassword",
        "name": "requesterPassword",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} requesterPassword</p>"
      },
      {
        "type": "param",
        "string": "{string} newPassword",
        "name": "newPassword",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} newPassword</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Update password of another user (not own).</p>",
      "summary": "<p>Update password of another user (not own).</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 192,
    "codeStart": 200,
    "code": "updateUsersPassword(userIri: string, requesterPassword: string, newPassword: string): Observable<User> {\n    const data = {\n        newPassword: newPassword,\n        requesterPassword: requesterPassword\n    };\n    return this.updateUser(userIri, data);\n}",
    "ctx": {
      "type": "method",
      "name": "updateUsersPassword",
      "string": "updateUsersPassword()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{any} data",
        "name": "data",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} data</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Update user data.</p>",
      "summary": "<p>Update user data.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 209,
    "codeStart": 216,
    "code": "updateUser(userIri: string, data: any): Observable<User> {\n\n    const path = '/admin/users/' + encodeURIComponent(userIri);\n\n    return this.httpPut(path, data).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}\n\n// ------------------------------------------------------------------------\n// DELETE\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "updateUser",
      "string": "updateUser()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Delete / deactivate user.</p>",
      "summary": "<p>Delete / deactivate user.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 230,
    "codeStart": 236,
    "code": "deleteUser(userIri: string): Observable<User> {\n    const path = '/admin/users/' + encodeURIComponent(userIri);\n    return this.httpDelete(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n\n}",
    "ctx": {
      "type": "method",
      "name": "deleteUser",
      "string": "deleteUser()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} userIri",
        "name": "userIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} userIri</p>"
      },
      {
        "type": "param",
        "string": "{string} projectIri",
        "name": "projectIri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} projectIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<User>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<User></p>"
      }
    ],
    "description": {
      "full": "<p>Remove user from project.</p>",
      "summary": "<p>Remove user from project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 245,
    "codeStart": 252,
    "code": "removeUserFromProject(userIri: string, projectIri: string): Observable<User> {\n    const path = '/admin/users/projects/' + encodeURIComponent(userIri) + '/' + encodeURIComponent(projectIri);\n    return this.httpDelete(path).pipe(\n        map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n        catchError(this.handleJsonError)\n    );\n}\n}",
    "ctx": {
      "type": "method",
      "name": "removeUserFromProject",
      "string": "removeUserFromProject()"
    }
  }
]