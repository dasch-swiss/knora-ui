[
  {
    "tags": [],
    "description": {
      "full": "<p>TODO: add documentation</p>",
      "summary": "<p>TODO: add documentation</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 9,
    "code": "@Component({\n    selector: 'kui-string-literal-input',\n    templateUrl: './string-literal-input.component.html',\n    styleUrls: ['./string-literal-input.component.scss']\n})\nexport class StringLiteralInputComponent implements OnInit {\n\n\n    languages: string[] = ['de', 'fr', 'it', 'en'];",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [placeholder='Label']",
        "name": "[placeholder='Label']",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} [placeholder='Label']</p>"
      }
    ],
    "description": {
      "full": "<p>Optional placeholder for the input field e.g. Label</p>",
      "summary": "<p>Optional placeholder for the input field e.g. Label</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 19,
    "codeStart": 24,
    "code": "@Input() placeholder?: string = 'Label';",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} language",
        "name": "language",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} language</p>"
      }
    ],
    "description": {
      "full": "<p>Optional predefined (selected) language: en, de, it, fr, etc.</p>",
      "summary": "<p>Optional predefined (selected) language: en, de, it, fr, etc.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 26,
    "codeStart": 31,
    "code": "@Input() language?: string;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [textarea=false]",
        "name": "[textarea=false]",
        "description": "",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{boolean} [textarea=false]</p>"
      }
    ],
    "description": {
      "full": "<p>Optional form field input type: textarea? set to true for textarea<br />\notherwise it's a simple (short) input field</p>",
      "summary": "<p>Optional form field input type: textarea? set to true for textarea<br />\notherwise it's a simple (short) input field</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 33,
    "codeStart": 39,
    "code": "@Input() textarea?: boolean = false;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{StringLiteral[]} value",
        "name": "value",
        "description": "",
        "types": [
          "Array.<StringLiteral>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<a href=\"StringLiteral.html\">StringLiteral</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{StringLiteral[]} value</p>"
      }
    ],
    "description": {
      "full": "<p>Optional form field value of type StringLiteral[]</p>",
      "summary": "<p>Optional form field value of type StringLiteral[]</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 41,
    "codeStart": 46,
    "code": "@Input() value?: StringLiteral[] = [];",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean}: [disabled=false]",
        "name": "{boolean}:",
        "description": "<p>[disabled=false]</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "<p>Optional disable the input field in case of no right to edit the field/value</p>",
      "summary": "<p>Optional disable the input field in case of no right to edit the field/value</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 48,
    "codeStart": 53,
    "code": "@Input() disabled?: boolean = false;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean}: [readonly=false]",
        "name": "{boolean}:",
        "description": "<p>[readonly=false]</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "<p>The readonly attribute specifies whether the control may be modified by the user.</p>",
      "summary": "<p>The readonly attribute specifies whether the control may be modified by the user.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 55,
    "codeStart": 60,
    "code": "@Input() readonly?: boolean = false;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "emits",
        "string": "{StringLiteral[]} dataChanged",
        "html": "<p>{StringLiteral[]} dataChanged</p>"
      }
    ],
    "description": {
      "full": "<p>Returns (output) an array of StringLiteral on any change on the input field.</p>",
      "summary": "<p>Returns (output) an array of StringLiteral on any change on the input field.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 62,
    "codeStart": 67,
    "code": "@Output() dataChanged: EventEmitter<StringLiteral[]> = new EventEmitter<StringLiteral[]>();",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "emits",
        "string": "{boolean} touched",
        "html": "<p>{boolean} touched</p>"
      }
    ],
    "description": {
      "full": "<p>Returns (output) true when the field was touched. This can be used to validate data, e.g. in case a value is required</p>",
      "summary": "<p>Returns (output) true when the field was touched. This can be used to validate data, e.g. in case a value is required</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 69,
    "codeStart": 74,
    "code": "@Output() touched: EventEmitter<boolean> = new EventEmitter<boolean>();",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Returns true when a user press ENTER. This can be used to submit data in the parent component.</p>\n<ul>\n<li>@emits {boolean} enter</li>\n</ul>",
      "summary": "<p>Returns true when a user press ENTER. This can be used to submit data in the parent component.</p>",
      "body": "<ul>\n<li>@emits {boolean} enter</li>\n</ul>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 76,
    "codeStart": 81,
    "code": "@Output() enter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n@ViewChild('textInput', { static: false }) textInput: ElementRef;\n\n@ViewChild('btnToSelectLanguage', { static: false }) btnToSelectLanguage: MatMenuTrigger;\n\nform: FormGroup;\n\nconstructor (\n    private _fb: FormBuilder\n) {\n\n    // set selected language, if it's not defined yet\n    if (!this.language) {\n        if (localStorage.getItem('session') !== null) {\n            // get language from the logged-in user profile data\n            this.language = JSON.parse(localStorage.getItem('session')).user.lang;\n        } else {\n            // get default language from browser\n            this.language = navigator.language.substr(0, 2);\n        }\n    }\n\n    // does the defined language exists in our supported languages list?\n    if (this.languages.indexOf(this.language) === -1) {\n        // if not, select the first language from our list of supported languages\n        this.language = this.languages[0];\n    }\n\n}\n\nngOnInit() {\n\n    // if (this.placeholder.length > 0) {\n    //     this.placeholder += ' (' + this.language + ')';\n    // }\n\n    // reset stringLiterals if they have empty values\n    this.resetValues();\n\n    // build the form\n    this.form = this._fb.group({\n        text: new FormControl(\n            {\n                value: '',\n                disabled: this.disabled\n            },\n            {\n                // updateOn: 'blur'\n            }\n        )\n    });\n    // update values on form change\n    this.form.valueChanges.subscribe(data => this.onValueChanged());\n\n    // get value from stringLiterals\n    const val = this.getValueFromStringLiteral(this.language);\n    this.updateFormField(val);\n\n\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "\nemit data to parent on any change on the input field",
        "html": "<p>emit data to parent on any change on the input field</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 143,
    "codeStart": 148,
    "code": "onValueChanged() {\n    if (!this.form) {\n        return;\n    }\n\n    const form = this.form;\n    const control = form.get('text');\n    this.touched.emit(control && control.dirty);\n\n    // if (control && control.dirty) {\n    // console.warn('control dirty');\n\n    // }\n\n    this.updateStringLiterals(this.language, this.form.controls['text'].value);\n\n    this.dataChanged.emit(this.value);\n\n}\n\ntoggleAll() {\n    // TODO: open/show all languages with their values\n}",
    "ctx": {
      "type": "method",
      "name": "onValueChanged",
      "string": "onValueChanged()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "\nSet the language after selecting; This updates the array of StringLiterals: adds item with the selected language if it doesn't exist",
        "html": "<p>Set the language after selecting; This updates the array of StringLiterals: adds item with the selected language if it doesn't exist</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 172,
    "codeStart": 177,
    "code": "setLanguage(lang: string) {\n\n    if (this.language === lang) {\n        // console.warn('DO NOTHING! this language was already selected');\n    } else {\n        // clean stringLIteral value for previous language, if text field is empty\n        this.updateStringLiterals(this.language, this.form.controls['text'].value);\n\n        this.language = lang;\n        // update form field value / reset in case of no value\n        const val = this.getValueFromStringLiteral(lang);\n        this.updateFormField(val);\n    }\n}",
    "ctx": {
      "type": "method",
      "name": "setLanguage",
      "string": "setLanguage()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "\nSwitch focus to input field after selecting a language",
        "html": "<p>Switch focus to input field after selecting a language</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 192,
    "codeStart": 197,
    "code": "switchFocus() {\n    // close the menu\n    if (!this.textarea && this.btnToSelectLanguage && this.btnToSelectLanguage.menuOpen) {\n        this.btnToSelectLanguage.closeMenu();\n    }\n\n    if (!this.disabled) {\n        this.form.controls['text'].enable();\n        this.textInput.nativeElement.focus();\n    }\n}",
    "ctx": {
      "type": "method",
      "name": "switchFocus",
      "string": "switchFocus()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "\nSet the value in the input field",
        "html": "<p>Set the value in the input field</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 209,
    "codeStart": 214,
    "code": "updateFormField(value: string) {\n    if (!value) {\n        value = '';\n    }\n    this.form.controls['text'].setValue(value);\n}",
    "ctx": {
      "type": "method",
      "name": "updateFormField",
      "string": "updateFormField()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "\nUpdate the array of StringLiterals depending on value / empty value add or remove item from array.",
        "html": "<p>Update the array of StringLiterals depending on value / empty value add or remove item from array.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 221,
    "codeStart": 226,
    "code": "updateStringLiterals(lang: string, value?: string) {\n    const index = this.value.findIndex(i => i.language === lang);\n\n    if (index > -1 && this.value[index].value.length > 0) {\n        // value is not empty and exists in list of stringLiterals\n        // console.log('update existing value for ' + lang + ' on position ' + index);\n        this.value[index].value = value;\n    }\n\n    if ((!value || value.length === 0) && index > -1) {\n        // value is empty: delete stringLiteral item for this language\n        // console.log('delete empty value for ' + lang + ' on position ' + index);\n        this.value.splice(index, 1);\n    }\n\n    if (index < 0 && value) {\n        // value doesn't exist in stringLiterals: add one\n        // console.log('add new value (' + value + ') for ' + lang);\n        const newValue: StringLiteral = {\n            value: value,\n            language: lang\n        };\n        this.value.push(newValue);\n    }\n\n}",
    "ctx": {
      "type": "method",
      "name": "updateStringLiterals",
      "string": "updateStringLiterals()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "\nIn case of strange array of StringLiterals, this method will reset to a API-conform array. This means an array without empty values.",
        "html": "<p>In case of strange array of StringLiterals, this method will reset to a API-conform array. This means an array without empty values.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 253,
    "codeStart": 258,
    "code": "resetValues() {\n    const length: number = this.value.length;\n\n    if (length > 0) {\n        let index = length - 1;\n        while (index >= 0) {\n            // remove items with empty value\n            if (!this.value[index].value.length) {\n                this.value.splice(index, 1);\n            }\n            index--;\n        }\n\n        // does an item for selected lanuage exists\n        if (this.value.findIndex(i => i.language === this.language) === -1) {\n            this.language = this.value[0].language;\n        }\n\n    } else {\n        this.value = [];\n    }\n}",
    "ctx": {
      "type": "method",
      "name": "resetValues",
      "string": "resetValues()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "\nGet the value from array of StringLiterals for the selected language",
        "html": "<p>Get the value from array of StringLiterals for the selected language</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 281,
    "codeStart": 286,
    "code": "getValueFromStringLiteral(lang: string): string {\n    // console.log('existing value in', this.value);\n    // get index for this language\n    const index = this.value.findIndex(i => i.language === lang);\n\n    if (this.value[index] && this.value[index].value.length > 0) {\n        return this.value[index].value;\n    } else {\n        return undefined;\n    }\n\n}\n\n}",
    "ctx": {
      "type": "method",
      "name": "getValueFromStringLiteral",
      "string": "getValueFromStringLiteral()"
    }
  }
]