[
  {
    "tags": [],
    "description": {
      "full": "<p>This pipe stringifies an array of StringLiterals. With the parameter 'all' it concats all values and appends the corresponing language in brackets.</p>\n<p>Otherwise it displays the value corresponding to the default language which comes from user profile (if a user is logged-in) or from browser. With the predefined language it checks, if a value exists for it, otherwise it shows the first value from the array</p>",
      "summary": "<p>This pipe stringifies an array of StringLiterals. With the parameter 'all' it concats all values and appends the corresponing language in brackets.</p>",
      "body": "<p>Otherwise it displays the value corresponding to the default language which comes from user profile (if a user is logged-in) or from browser. With the predefined language it checks, if a value exists for it, otherwise it shows the first value from the array</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 9,
    "code": "@Pipe({\n    name: 'kuiStringifyStringLiteral'\n})\nexport class StringifyStringLiteralPipe implements PipeTransform {\n\n    transform(value: StringLiteral[], args: string): string {\n        let stringified: string = '';\n\n        let language: string;\n\n        if (args === 'all') {\n            // show all values\n            let i = 0;\n            for (const sl of value) {\n                const delimiter = (i > 0 ? ' / ' : '');\n                stringified += delimiter + sl.value + ' (' + sl.language + ')';\n\n                i++;\n            }\n            return stringified;\n        } else {\n            // show only one value, depending on default language\n            // the language is defined in user profile if a user is logged-in\n            // otherwise it takes the language from browser\n            if (localStorage.getItem('session') !== null) {\n                // get language from the logged-in user profile data\n                language = JSON.parse(localStorage.getItem('session')).user.lang;\n            } else {\n                // get default language from browser\n                language = navigator.language.substr(0, 2);\n            }\n            // does the defined language exists and does it have a value?\n            const index = value.findIndex(i => i.language === language);\n\n            if (value[index] && value[index].value.length > 0) {\n                return value[index].value;\n            } else {\n                return value[0].value;\n            }\n\n        }\n\n    }\n\n}",
    "ctx": false
  }
]