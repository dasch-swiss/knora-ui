[
  {
    "tags": [],
    "description": {
      "full": "<p>Custom header component containing a calendar format switcher</p>",
      "summary": "<p>Custom header component containing a calendar format switcher</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 8,
    "codeStart": 9,
    "code": "@Component({\n    selector: 'kui-calendar-header',\n    template: `\n      <mat-select placeholder=\"Calendar Format\" class=\"kui-calendar-header\" [formControl]=\"form.controls['calendar']\">\n        <mat-option *ngFor=\"let cal of supportedCalendarFormats\" [value]=\"cal\">{{cal}}</mat-option>\n      </mat-select>\n      <mat-calendar-header></mat-calendar-header>\n    `,\n    styleUrls: ['./header-calendar.component.scss']\n})\nexport class HeaderComponent<D> implements OnInit {\n    constructor (@Host() private _calendar: MatCalendar<JDNConvertibleCalendar>,\n        private _dateAdapter: DateAdapter<JDNConvertibleCalendar>,\n        private _datepickerContent: MatDatepickerContent<JDNConvertibleCalendar>,\n        @Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    form: FormGroup;\n\n    // a list of supported calendar formats (Gregorian and Julian)\n    supportedCalendarFormats = JDNConvertibleCalendar.supportedCalendars;\n\n    // the currently active calendar format\n    activeFormat;\n\n    ngOnInit() {\n\n        // get the currently active calendar format from the date adapter\n        if (this._dateAdapter instanceof JDNConvertibleCalendarDateAdapter) {\n            this.activeFormat = this._dateAdapter.activeCalendarFormat;\n        } else {\n            console.log('date adapter is expected to be an instance of JDNConvertibleCalendarDateAdapter');\n        }\n\n        // build a form for the calendar format selection\n        this.form = this.fb.group({\n            calendar: [this.activeFormat, Validators.required]\n        });\n\n        // do the conversion when the user selects another calendar format\n        this.form.valueChanges.subscribe((data) => {\n            // pass the target calendar format to the conversion method\n            this.convertDate(data.calendar);\n        });\n\n    }",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "calendar the target calendar format.",
        "name": "calendar",
        "description": "<p>the target calendar format.</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "<p>Converts the date into the target format.</p>",
      "summary": "<p>Converts the date into the target format.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 56,
    "codeStart": 61,
    "code": "convertDate(calendar: 'Gregorian' | 'Julian') {\n\n    if (this._dateAdapter instanceof JDNConvertibleCalendarDateAdapter) {\n\n        // convert the date into the target calendar format\n        const convertedDate = this._dateAdapter.convertCalendarFormat(this._calendar.activeDate, calendar);\n\n        // set the new date\n        this._calendar.activeDate = convertedDate;\n\n        // select the new date in the datepicker UI\n        this._datepickerContent.datepicker.select(convertedDate);\n\n        // update view after calendar format conversion\n        this._calendar.updateTodaysDate();\n    } else {\n        console.log('date adapter is expected to be an instance of JDNConvertibleCalendarDateAdapter');\n    }\n}\n}",
    "ctx": {
      "type": "method",
      "name": "convertDate",
      "string": "convertDate()"
    }
  }
]