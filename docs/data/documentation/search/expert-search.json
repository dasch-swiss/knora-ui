[
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} route Route to navigate after search. This route path should contain a component for search results.",
        "name": "route",
        "description": "<p>Route to navigate after search. This route path should contain a component for search results.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 13,
    "codeStart": 16,
    "code": "@Input() route?;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "gravsearch Send the gravsearch query back.",
        "name": "gravsearch",
        "description": "<p>Send the gravsearch query back.</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 18,
    "codeStart": 21,
    "code": "@Output() gravsearch = new EventEmitter<string>();",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} toggleExtendedSearchForm Trigger toggle for extended search form.",
        "name": "toggleExtendedSearchForm",
        "description": "<p>Trigger toggle for extended search form.</p>",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 24,
    "codeStart": 27,
    "code": "@Output() toggleExpertSearchForm = new EventEmitter<boolean>();\n\nexpertSearchForm: FormGroup;\n\nconstructor(\n    private fb: FormBuilder,\n    private _route: ActivatedRoute,\n    private _router: Router,\n    // private _searchService: SearchService,\n    private _searchParamsService: SearchParamsService,\n    @Inject(KuiConfigToken) public config\n) { }\n\nngOnInit() {\n    this.initForm();\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Initiate the form with predefined Gravsearch query as example.",
        "html": "<p>Initiate the form with predefined Gravsearch query as example.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 44,
    "codeStart": 48,
    "code": "private initForm() {\n    this.expertSearchForm = this.fb.group({\n        gravquery: [\n            `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\nPREFIX incunabula: <${this.config.ontologyIRI}/ontology/0803/incunabula/simple/v2#>\n\nCONSTRUCT {\n?book knora-api:isMainResource true .\n?book incunabula:title ?title .\n\n} WHERE {\n?book a incunabula:book .\n?book incunabula:title ?title .\n}\n`,\n            Validators.required\n        ]\n    });\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Send the gravsearch query to the result view, either through the route or by emitting the gravsearch as an output.",
        "html": "<p>Send the gravsearch query to the result view, either through the route or by emitting the gravsearch as an output.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 69,
    "codeStart": 73,
    "code": "submitQuery() {\n    const gravsearch = this.generateGravsearch(0);\n\n    if (this.route) {\n        this._router.navigate([this.route + '/extended/', gravsearch], { relativeTo: this._route });\n    } else {\n        this.gravsearch.emit(gravsearch);\n    }\n\n    // toggle expert search form\n    this.toggleExpertSearchForm.emit(true);\n}",
    "ctx": {
      "type": "method",
      "name": "submitQuery",
      "string": "submitQuery()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Generate the whole gravsearch query matching the query given by the form.",
        "html": "<p>Generate the whole gravsearch query matching the query given by the form.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 86,
    "codeStart": 90,
    "code": "private generateGravsearch(offset: number = 0): string {\n    const queryTemplate = this.expertSearchForm.controls['gravquery'].value;\n\n    // offset component of the Gravsearch query\n    const offsetTemplate = `\n     OFFSET ${offset}\n     `;\n\n    // function that generates the same Gravsearch query with the given offset\n    const generateGravsearchWithCustomOffset = (\n        localOffset: number\n    ): string => {\n        const offsetCustomTemplate = `\n         OFFSET ${localOffset}\n         `;\n\n        return queryTemplate + offsetCustomTemplate;\n    };\n\n    if (offset === 0) {\n        // store the function so another Gravsearch query can be created with an increased offset\n        this._searchParamsService.changeSearchParamsMsg(\n            new ExtendedSearchParams(generateGravsearchWithCustomOffset)\n        );\n    }\n    return queryTemplate + offsetTemplate;\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Reset the form to the initial state.",
        "html": "<p>Reset the form to the initial state.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 118,
    "codeStart": 122,
    "code": "resetForm() {\n    this.initForm();\n}\n}",
    "ctx": {
      "type": "method",
      "name": "resetForm",
      "string": "resetForm()"
    }
  }
]