[
  {
    "tags": [],
    "description": {
      "full": "<p>The search-panel contains the kui-fulltext-search and the kui-extended-search components.</p>",
      "summary": "<p>The search-panel contains the kui-fulltext-search and the kui-extended-search components.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 8,
    "code": "@Component({\n    selector: 'kui-search-panel',\n    templateUrl: './search-panel.component.html',\n    styleUrls: ['./search-panel.component.scss', '../assets/style/search.scss']\n})\nexport class SearchPanelComponent {",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} route Route to navigate after search. This route path should contain a component for search results.",
        "name": "route",
        "description": "<p>Route to navigate after search. This route path should contain a component for search results.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 14,
    "codeStart": 17,
    "code": "@Input() route: string = '/search';",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [projectfilter] If true it shows the selection of projects to filter by one of them",
        "name": "[projectfilter]",
        "description": "<p>If true it shows the selection of projects to filter by one of them</p>",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 19,
    "codeStart": 22,
    "code": "@Input() projectfilter?: boolean = false;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [filterbyproject] If your full-text search should be filtered by one project, you can define it with project iri in the parameter filterbyproject.",
        "name": "[filterbyproject]",
        "description": "<p>If your full-text search should be filtered by one project, you can define it with project iri in the parameter filterbyproject.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 24,
    "codeStart": 27,
    "code": "@Input() filterbyproject?: string;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [advanced] Adds the extended / advanced search to the panel",
        "name": "[advanced]",
        "description": "<p>Adds the extended / advanced search to the panel</p>",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 29,
    "codeStart": 32,
    "code": "@Input() advanced?: boolean = false;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [expert] Adds the expert search / gravsearch editor to the panel",
        "name": "[expert]",
        "description": "<p>Adds the expert search / gravsearch editor to the panel</p>",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 34,
    "codeStart": 37,
    "code": "@Input() expert?: boolean = false;\n\n@ViewChild('fullSearchPanel') searchPanel: ElementRef;\n\n@ViewChild('searchMenu') searchMenu: TemplateRef<any>;\n//    @ViewChild('expertSearchMenu') expertMenu: TemplateRef<any>;\n\n// overlay reference\noverlayRef: OverlayRef;\n\n// show advanced or expert search\nshowAdvanced: boolean;\n\nconstructor(private _overlay: Overlay,\n    private _viewContainerRef: ViewContainerRef, ) { }\n\nopenPanelWithBackdrop(type: string) {\n\n    this.showAdvanced = (type === 'advanced');\n\n    const config = new OverlayConfig({\n        hasBackdrop: true,\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n        // backdropClass: 'cdk-overlay-dark-backdrop',\n        positionStrategy: this.getOverlayPosition(),\n        scrollStrategy: this._overlay.scrollStrategies.block()\n    });\n\n    this.overlayRef = this._overlay.create(config);\n    this.overlayRef.attach(new TemplatePortal(this.searchMenu, this._viewContainerRef));\n    this.overlayRef.backdropClick().subscribe(() => {\n        this.overlayRef.detach();\n    });\n}\n\ngetOverlayPosition(): PositionStrategy {\n    const positions = [\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\n    ];\n\n    const overlayPosition = this._overlay.position().flexibleConnectedTo(this.searchPanel).withPositions(positions).withLockedPosition(false);\n\n    return overlayPosition;\n}\n\ncloseMenu(): void {\n    this.overlayRef.detach();\n}\n}",
    "ctx": false
  }
]