[
  {
    "tags": [],
    "description": {
      "full": "<p>Full-text search performs queries including one or more terms or phrases and returns data that<br />\nmatch search conditions. The asterisk * can be used as a wildcard symbol.</p>",
      "summary": "<p>Full-text search performs queries including one or more terms or phrases and returns data that<br />\nmatch search conditions. The asterisk * can be used as a wildcard symbol.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 19,
    "codeStart": 23,
    "code": "@Component({\n    selector: 'kui-fulltext-search',\n    templateUrl: './fulltext-search.component.html',\n    styleUrls: ['./fulltext-search.component.scss'],\n    animations: [\n        trigger('fulltextSearchMenu', [\n            state('inactive', style({ display: 'none' })),\n            state('active', style({ display: 'block' })),\n            transition('inactive => active', animate('100ms ease-in')),\n            transition('active => inactive', animate('100ms ease-out'))\n        ])\n    ]\n})\nexport class FulltextSearchComponent implements OnInit {",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} route",
        "name": "route",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} route</p>"
      }
    ],
    "description": {
      "full": "<p>Route to navigate after search. This route path should contain a component for search results.</p>",
      "summary": "<p>Route to navigate after search. This route path should contain a component for search results.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 37,
    "codeStart": 42,
    "code": "@Input() route: string = '/search';",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [projectfilter]",
        "name": "[projectfilter]",
        "description": "",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{boolean} [projectfilter]</p>"
      }
    ],
    "description": {
      "full": "<p>projectfilter: if true it shows the selection of projects to filter by one of them</p>",
      "summary": "<p>projectfilter: if true it shows the selection of projects to filter by one of them</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 44,
    "codeStart": 49,
    "code": "@Input() projectfilter?: boolean = false;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [filterbyproject]",
        "name": "[filterbyproject]",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} [filterbyproject]</p>"
      }
    ],
    "description": {
      "full": "<p>If your full-text search should be filtered by one project, you can define it with project iri in the parameter filterbyproject.</p>",
      "summary": "<p>If your full-text search should be filtered by one project, you can define it with project iri in the parameter filterbyproject.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 51,
    "codeStart": 56,
    "code": "@Input() filterbyproject?: string;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "input field for full-text search",
        "html": "<p>input field for full-text search</p>"
      },
      {
        "type": "param",
        "string": "{} 'search'",
        "name": "{}",
        "description": "<p>'search'</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "param",
        "string": "{ElementRef} searchField",
        "name": "searchField",
        "description": "",
        "types": [
          "ElementRef"
        ],
        "typesDescription": "<a href=\"ElementRef.html\">ElementRef</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ElementRef} searchField</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 58,
    "codeStart": 65,
    "code": "@ViewChild('search') searchField: ElementRef;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "mat menu: after select a project, the focus should switch to the input field",
        "html": "<p>mat menu: after select a project, the focus should switch to the input field</p>"
      },
      {
        "type": "param",
        "string": "{} 'btnToSelectProject'",
        "name": "{}",
        "description": "<p>'btnToSelectProject'</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "param",
        "string": "{MatMenuTrigger} selectProject",
        "name": "selectProject",
        "description": "",
        "types": [
          "MatMenuTrigger"
        ],
        "typesDescription": "<a href=\"MatMenuTrigger.html\">MatMenuTrigger</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{MatMenuTrigger} selectProject</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 67,
    "codeStart": 74,
    "code": "@ViewChild('btnToSelectProject') selectProject: MatMenuTrigger;\n\nsearchQuery: string;\n\nshowSimpleSearch: boolean = true;\n\nsearchPanelFocus: boolean = false;\n\nprevSearch: PrevSearchItem[] = JSON.parse(localStorage.getItem('prevSearch'));\n\nfocusOnSimple: string = 'inactive';\n\nsearchLabel: string = 'Search';\n\nprojects: Project[];\nprojectLabel: string = 'Filter project';\nprojectIri: string;\n\nconstructor(\n    private _route: ActivatedRoute,\n    private _router: Router,\n    private _projectsService: ProjectsService\n) {}\n\nngOnInit() {\n    if (this.filterbyproject) {\n        this.getProject(this.filterbyproject);\n    }\n    if (this.projectfilter) {\n        this.getAllProjects();\n\n        if (localStorage.getItem('currentProject') !== null) {\n            this.setProject(\n                JSON.parse(localStorage.getItem('currentProject'))\n            );\n        }\n    }\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "search_ele",
        "name": "search_ele",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>search_ele</p>"
      },
      {
        "type": "param",
        "string": "event",
        "name": "event",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>event</p>"
      }
    ],
    "description": {
      "full": "<p>Do search on press Enter, close search menu on Escape</p>",
      "summary": "<p>Do search on press Enter, close search menu on Escape</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 113,
    "codeStart": 120,
    "code": "onKey(search_ele: HTMLElement, event): void {\n    this.focusOnSimple = 'active';\n    this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n    if (\n        this.searchQuery &&\n        (event.key === 'Enter' ||\n            event.keyCode === 13 ||\n            event.which === 13)\n    ) {\n        this.doSearch();\n    }\n    if (\n        event.key === 'Escape' ||\n        event.keyCode === 27 ||\n        event.which === 27\n    ) {\n        this.resetSearch(search_ele);\n    }\n}",
    "ctx": {
      "type": "method",
      "name": "onKey",
      "string": "onKey()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Realise a simple search</p>",
      "summary": "<p>Realise a simple search</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 140,
    "codeStart": 145,
    "code": "doSearch(): void {\n    if (this.searchQuery !== undefined && this.searchQuery !== null) {\n        this.toggleMenu();\n\n        if (this.projectIri !== undefined) {\n            this._router.navigate([\n                this.route +\n                    '/fulltext/' +\n                    this.searchQuery +\n                    '/' +\n                    encodeURIComponent(this.projectIri)\n            ]);\n        } else {\n            this._router.navigate([\n                this.route + '/fulltext/' + this.searchQuery\n            ]);\n        }\n\n        // this._router.navigate(['/search/fulltext/' + this.searchQuery], { relativeTo: this._route });\n\n        // push the search query into the local storage prevSearch array (previous search)\n        // to have a list of recent search requests\n        let existingPrevSearch: PrevSearchItem[] = JSON.parse(\n            localStorage.getItem('prevSearch')\n        );\n        if (existingPrevSearch === null) {\n            existingPrevSearch = [];\n        }\n        let i: number = 0;\n        for (const entry of existingPrevSearch) {\n            // remove entry, if exists already\n            if (this.searchQuery === entry.query && this.projectIri === entry.projectIri) {\n                existingPrevSearch.splice(i, 1);\n            }\n            i++;\n        }\n\n        // A search value is expected to have at least length of 3\n        if (this.searchQuery.length > 2) {\n            let currentQuery: PrevSearchItem = {\n                query: this.searchQuery\n            };\n\n            if (this.projectIri) {\n                currentQuery = {\n                    projectIri: this.projectIri,\n                    projectLabel: this.projectLabel,\n                    query: this.searchQuery\n                };\n            }\n\n            existingPrevSearch.push(currentQuery);\n\n            localStorage.setItem(\n                'prevSearch',\n                JSON.stringify(existingPrevSearch)\n            );\n        }\n\n    } else {\n        // search_ele.focus();\n        this.searchField.nativeElement.focus();\n        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n    }\n}",
    "ctx": {
      "type": "method",
      "name": "doSearch",
      "string": "doSearch()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{HTMLElement} search_ele",
        "name": "search_ele",
        "description": "",
        "types": [
          "HTMLElement"
        ],
        "typesDescription": "<code>HTMLElement</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{HTMLElement} search_ele</p>"
      }
    ],
    "description": {
      "full": "<p>Reset the search: close the search menu; clean the input field</p>",
      "summary": "<p>Reset the search: close the search menu; clean the input field</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 211,
    "codeStart": 217,
    "code": "resetSearch(search_ele: HTMLElement): void {\n    this.searchQuery = null;\n    search_ele.focus();\n    this.focusOnSimple = 'inactive';\n    this.searchPanelFocus = !this.searchPanelFocus;\n}",
    "ctx": {
      "type": "method",
      "name": "resetSearch",
      "string": "resetSearch()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Switch according to the focus between simple or extended search</p>",
      "summary": "<p>Switch according to the focus between simple or extended search</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 224,
    "codeStart": 229,
    "code": "toggleMenu(): void {\n    this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n    this.focusOnSimple =\n        this.focusOnSimple === 'active' ? 'inactive' : 'active';\n    this.showSimpleSearch = true;\n}",
    "ctx": {
      "type": "method",
      "name": "toggleMenu",
      "string": "toggleMenu()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Set simple focus to active</p>",
      "summary": "<p>Set simple focus to active</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 236,
    "codeStart": 241,
    "code": "setFocus(): void {\n    this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n    this.focusOnSimple = 'active';\n    this.searchPanelFocus = !this.searchPanelFocus;\n}",
    "ctx": {
      "type": "method",
      "name": "setFocus",
      "string": "setFocus()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} prevSearch",
        "name": "prevSearch",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} prevSearch</p>"
      }
    ],
    "description": {
      "full": "<p>Realise a previous search</p>",
      "summary": "<p>Realise a previous search</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 247,
    "codeStart": 253,
    "code": "doPrevSearch(prevSearch: PrevSearchItem): void {\n\n    this.searchQuery = prevSearch.query;\n\n    if (prevSearch.projectIri !== undefined) {\n        this.projectIri = prevSearch.projectIri;\n        this.projectLabel = prevSearch.projectLabel;\n        this._router.navigate([\n            this.route +\n                '/fulltext/' +\n                this.searchQuery +\n                '/' +\n                encodeURIComponent(prevSearch.projectIri)\n        ]);\n    } else {\n        this.projectIri = undefined;\n        this.projectLabel = 'Filter project';\n        this._router.navigate([\n            this.route + '/fulltext/' + this.searchQuery\n        ]);\n    }\n\n    this.toggleMenu();\n}",
    "ctx": {
      "type": "method",
      "name": "doPrevSearch",
      "string": "doPrevSearch()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} prevSearch term of the search",
        "name": "prevSearch",
        "description": "<p>term of the search</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Reset previous searches - the whole previous search or specific item by name</p>",
      "summary": "<p>Reset previous searches - the whole previous search or specific item by name</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 278,
    "codeStart": 284,
    "code": "resetPrevSearch(prevSearch?: PrevSearchItem): void {\n    if (prevSearch) {\n        // delete only this item with the name ...\n        const i: number = this.prevSearch.indexOf(prevSearch);\n        this.prevSearch.splice(i, 1);\n        localStorage.setItem('prevSearch', JSON.stringify(this.prevSearch));\n    } else {\n        // delete the whole \"previous search\" array\n        localStorage.removeItem('prevSearch');\n    }\n    this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n}",
    "ctx": {
      "type": "method",
      "name": "resetPrevSearch",
      "string": "resetPrevSearch()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>get all projects for &quot;filter by project&quot; selection</p>",
      "summary": "<p>get all projects for &quot;filter by project&quot; selection</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 297,
    "codeStart": 301,
    "code": "getAllProjects() {\n    this._projectsService.getAllProjects().subscribe(\n        (projects: Project[]) => {\n            this.projects = projects;\n            // this.loadSystem = false;\n            if (localStorage.getItem('currentProject') !== null) {\n                this.projectLabel = JSON.parse(\n                    localStorage.getItem('currentProject')\n                ).shortname;\n            }\n        },\n        (error: ApiServiceError) => {\n            console.error(error);\n        }\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getAllProjects",
      "string": "getAllProjects()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} iri",
        "name": "iri",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} iri</p>"
      }
    ],
    "description": {
      "full": "<p>get project information in case of @Input project</p>",
      "summary": "<p>get project information in case of @Input project</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 318,
    "codeStart": 324,
    "code": "getProject(iri: string) {\n    this._projectsService.getProjectByIri(iri).subscribe(\n        (project: Project) => {\n            this.setProject(project);\n        },\n        (error: ApiServiceError) => {\n            console.error(error);\n        }\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getProject",
      "string": "getProject()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{Project} project",
        "name": "project",
        "description": "",
        "types": [
          "Project"
        ],
        "typesDescription": "<a href=\"Project.html\">Project</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Project} project</p>"
      }
    ],
    "description": {
      "full": "<p>set the project to use and store it in the local storage</p>",
      "summary": "<p>set the project to use and store it in the local storage</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 335,
    "codeStart": 341,
    "code": "setProject(project?: Project) {\n    if (!project) {\n        // set default project: all\n        this.projectLabel = 'Filter project';\n        this.projectIri = undefined;\n        localStorage.removeItem('currentProject');\n    } else {\n        // set current project shortname and id\n        this.projectLabel = project.shortname;\n        this.projectIri = project.id;\n        localStorage.setItem('currentProject', JSON.stringify(project));\n    }\n}",
    "ctx": {
      "type": "method",
      "name": "setProject",
      "string": "setProject()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>switch focus from select-project-menu to input field</p>",
      "summary": "<p>switch focus from select-project-menu to input field</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 355,
    "codeStart": 359,
    "code": "changeFocus() {\n    this.selectProject.closeMenu();\n    this.searchField.nativeElement.focus();\n}\n}",
    "ctx": {
      "type": "method",
      "name": "changeFocus",
      "string": "changeFocus()"
    }
  }
]