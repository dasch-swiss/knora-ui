[
  {
    "tags": [],
    "description": {
      "full": "<p>Resets the comparison operators for this._property.</p>",
      "summary": "<p>Resets the comparison operators for this._property.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 68,
    "codeStart": 71,
    "code": "resetComparisonOperators() {\n\n    // depending on object class, set comparison operators and value entry field\n    if (this._property.isLinkProperty) {\n        this.propertyValueType = KnoraConstants.Resource;\n    } else {\n        this.propertyValueType = this._property.objectType;\n    }\n\n    switch (this.propertyValueType) {\n\n        case KnoraConstants.TextValue:\n            this.comparisonOperators = [new Like(), new Match(), new Equals(), new NotEquals(), new Exists()];\n            break;\n\n        case KnoraConstants.BooleanValue:\n        case KnoraConstants.Resource:\n        case KnoraConstants.UriValue:\n        case KnoraConstants.IntervalValue:\n            this.comparisonOperators = [new Equals(), new NotEquals(), new Exists()];\n            break;\n\n        case KnoraConstants.IntValue:\n        case KnoraConstants.DecimalValue:\n        case KnoraConstants.DateValue:\n            this.comparisonOperators = [new Equals(), new NotEquals(), new LessThan(), new LessThanEquals(), new GreaterThan(), new GreaterThanEquals(), new Exists()];\n            break;\n\n        case KnoraConstants.ListValue:\n        case KnoraConstants.GeomValue:\n        case KnoraConstants.FileValue:\n        case KnoraConstants.AudioFileValue:\n        case KnoraConstants.StillImageFileValue:\n        case KnoraConstants.DDDFileValue:\n        case KnoraConstants.MovingImageFileValue:\n        case KnoraConstants.TextFileValue:\n        case KnoraConstants.ColorValue:\n            this.comparisonOperators = [new Exists()];\n            break;\n\n        default:\n            console.log('ERROR: Unsupported value type ' + this._property.objectType);\n\n    }\n\n}\n\nngOnInit() { }\n\nngOnChanges() {\n\n    // build a form for comparison operator selection\n    this.form = this.fb.group({\n        comparisonOperator: [null, Validators.required]\n    });\n\n    // store comparison operator when selected\n    this.form.valueChanges.subscribe((data) => {\n        this.comparisonOperatorSelected = data.comparisonOperator;\n    });\n\n    resolvedPromise.then(() => {\n\n        // remove from the parent form group (clean reset)\n        this.formGroup.removeControl('comparisonOperator');\n\n        // add form to the parent form group\n        this.formGroup.addControl('comparisonOperator', this.form);\n    });\n\n}",
    "ctx": {
      "type": "method",
      "name": "resetComparisonOperators",
      "string": "resetComparisonOperators()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Gets the specified comparison operator and value for the property.</p>\n<p>returns {ComparisonOperatorAndValue} the comparison operator and the specified value</p>",
      "summary": "<p>Gets the specified comparison operator and value for the property.</p>",
      "body": "<p>returns {ComparisonOperatorAndValue} the comparison operator and the specified value</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 143,
    "codeStart": 148,
    "code": "getComparisonOperatorAndValueLiteralForProperty(): ComparisonOperatorAndValue {\n    // return value (literal or IRI) from the child component\n    let value: Value;\n\n    // comparison operator 'Exists' does not require a value\n    if (this.comparisonOperatorSelected.getClassName() !== 'Exists') {\n        value = this.propertyValueComponent.getValue();\n    }\n\n    // return the comparison operator and the specified value\n    return new ComparisonOperatorAndValue(this.comparisonOperatorSelected, value);\n\n}\n\n}",
    "ctx": {
      "type": "method",
      "name": "getComparisonOperatorAndValueLiteralForProperty",
      "string": "getComparisonOperatorAndValueLiteralForProperty()"
    }
  }
]