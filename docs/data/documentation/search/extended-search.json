[
  {
    "tags": [],
    "description": {
      "full": "<p>The extended search allows you to filter by project, by source type (resource class), or by the metadata (properties) of source types. Each filter can be standalone or combined. The metadata field can be precisely filtered with criteria such as &quot;contains&quot;, &quot;like&quot;, &quot;equals to&quot;, &quot;exists&quot; or in case of a date value with &quot;before&quot; or &quot;after&quot;. In addition, for a metadata field that is connected to another source type, it's possible to filter by this second source type. If you are looking for the source type &quot;Photograph&quot; with the metadata field &quot;Photographer&quot;, which is connected to source type &quot;Person&quot;, you can search for photograph(s) taken by person(s) who is born before February 1970. The result of this request will be an intersection of the two source types.</p>",
      "summary": "<p>The extended search allows you to filter by project, by source type (resource class), or by the metadata (properties) of source types. Each filter can be standalone or combined. The metadata field can be precisely filtered with criteria such as &quot;contains&quot;, &quot;like&quot;, &quot;equals to&quot;, &quot;exists&quot; or in case of a date value with &quot;before&quot; or &quot;after&quot;. In addition, for a metadata field that is connected to another source type, it's possible to filter by this second source type. If you are looking for the source type &quot;Photograph&quot; with the metadata field &quot;Photographer&quot;, which is connected to source type &quot;Person&quot;, you can search for photograph(s) taken by person(s) who is born before February 1970. The result of this request will be an intersection of the two source types.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 10,
    "codeStart": 13,
    "code": "@Component({\n    selector: 'kui-extended-search',\n    templateUrl: './extended-search.component.html',\n    styleUrls: ['./extended-search.component.scss']\n})\nexport class ExtendedSearchComponent implements OnInit {",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} route Route to navigate after search. This route path should contain a component for search results.",
        "name": "route",
        "description": "<p>Route to navigate after search. This route path should contain a component for search results.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 20,
    "codeStart": 23,
    "code": "@Input() route?;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} toggleExtendedSearchForm Trigger toggle for extended search form.",
        "name": "toggleExtendedSearchForm",
        "description": "<p>Trigger toggle for extended search form.</p>",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 25,
    "codeStart": 28,
    "code": "@Output() toggleExtendedSearchForm = new EventEmitter<boolean>();",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} gravsearch Send the gravsearch query back.",
        "name": "gravsearch",
        "description": "<p>Send the gravsearch query back.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 30,
    "codeStart": 33,
    "code": "@Output() gravsearch = new EventEmitter<string>();\n\n// all available ontologies\nontologies: OntologyMetadata[] = [];\n\n// ontology chosen by the user\nactiveOntology: string;\n\n// properties specified by the user\nactiveProperties: boolean[] = [];\n\n// resource classes for the selected ontology\nresourceClasses: Array<ResourceClass> = [];\n\n// definition of the selected resource class, if set.\nactiveResourceClass: ResourceClass;\n\n// properties for the selected ontology or selected resource class\nproperties: Properties;\n\nresult: ReadResource[] = [new ReadResource()];\n\n// reference to the component that controls the resource class selection\n@ViewChild('resourceClass', { static: false }) resourceClassComponent: SelectResourceClassComponent;\n\n// reference to the component controlling the property selection\n@ViewChildren('property') propertyComponents: QueryList<SelectPropertyComponent>;\n\n// FormGroup (used as parent for child components)\nform: FormGroup;\n\n// form validation status\nformValid = false;\n\nconstructor(\n    @Inject(FormBuilder) private fb: FormBuilder,\n    @Inject(KnoraApiConnectionToken) private knoraApiConnection: KnoraApiConnection,\n    private _route: ActivatedRoute,\n    private _router: Router,\n    private _cacheService: OntologyCacheService,\n    private _gravSearchService: GravsearchGenerationService) {\n}\n\nngOnInit() {\n\n    // parent form is empty, it gets passed to the child components\n    this.form = this.fb.group({});\n\n    // if form status changes, re-run validation\n    this.form.statusChanges.subscribe((data) => {\n        this.formValid = this.validateForm();\n        // console.log(this.form);\n    });\n\n    // initialize ontologies to be used for the ontologies selection in the search form\n    this.initializeOntologies();\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Add a property to the search form.",
        "html": "<p>Add a property to the search form.</p>"
      },
      {
        "type": "returns",
        "string": "void",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>void</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 91,
    "codeStart": 96,
    "code": "addProperty(): void {\n    this.activeProperties.push(true);\n}",
    "ctx": {
      "type": "method",
      "name": "addProperty",
      "string": "addProperty()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Remove the last property from the search form.",
        "html": "<p>Remove the last property from the search form.</p>"
      },
      {
        "type": "returns",
        "string": "void",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>void</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 100,
    "codeStart": 105,
    "code": "removeProperty(): void {\n    this.activeProperties.splice(-1, 1);\n}",
    "ctx": {
      "type": "method",
      "name": "removeProperty",
      "string": "removeProperty()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Gets all available ontologies for the search form.",
        "html": "<p>Gets all available ontologies for the search form.</p>"
      },
      {
        "type": "returns",
        "string": "void",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>void</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 109,
    "codeStart": 114,
    "code": "initializeOntologies(): void {\n\n    this.knoraApiConnection.v2.onto.getOntologiesMetadata().subscribe(\n        (response: OntologiesMetadata) => {\n            this.ontologies = response.ontologies;\n        },\n        (error: ApiResponseError) => {\n            console.error(error);\n        });\n}",
    "ctx": {
      "type": "method",
      "name": "initializeOntologies",
      "string": "initializeOntologies()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Once an ontology has been selected, gets its classes and properties.\nThe classes and properties will be made available to the user for selection.",
        "html": "<p>Once an ontology has been selected, gets its classes and properties.<br />\nThe classes and properties will be made available to the user for selection.</p>"
      },
      {
        "type": "param",
        "string": "ontologyIri Iri of the ontology chosen by the user.",
        "name": "ontologyIri",
        "description": "<p>Iri of the ontology chosen by the user.</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "returns",
        "string": "void",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>void</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 125,
    "codeStart": 133,
    "code": "getResourceClassesAndPropertiesForOntology(ontologyIri: string): void {\n\n    // reset active resource class definition\n    this.activeResourceClass = undefined;\n\n    // reset specified properties\n    this.activeProperties = [];\n\n    this.activeOntology = ontologyIri;\n\n    this._cacheService.getEntityDefinitionsForOntologies([ontologyIri]).subscribe(\n        (ontoInfo: OntologyInformation) => {\n\n            this.resourceClasses = ontoInfo.getResourceClassesAsArray(true);\n            this.properties = ontoInfo.getProperties();\n\n        }\n    );\n\n}",
    "ctx": {
      "type": "method",
      "name": "getResourceClassesAndPropertiesForOntology",
      "string": "getResourceClassesAndPropertiesForOntology()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Once a resource class has been selected, gets its properties.\nThe properties will be made available to the user for selection.",
        "html": "<p>Once a resource class has been selected, gets its properties.<br />\nThe properties will be made available to the user for selection.</p>"
      },
      {
        "type": "param",
        "string": "resourceClassIri",
        "name": "resourceClassIri",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>resourceClassIri</p>"
      },
      {
        "type": "returns",
        "string": "void",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>void</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 154,
    "codeStart": 162,
    "code": "getPropertiesForResourceClass(resourceClassIri: string): void {\n\n    // reset specified properties\n    this.activeProperties = [];\n\n    // if the client undoes the selection of a resource class, use the active ontology as a fallback\n    if (resourceClassIri === null) {\n        this.getResourceClassesAndPropertiesForOntology(this.activeOntology);\n    } else {\n\n        this._cacheService.getResourceClassDefinitions([resourceClassIri]).subscribe(\n            (ontoInfo: OntologyInformation) => {\n                this.properties = ontoInfo.getProperties();\n\n                this.activeResourceClass = ontoInfo.getResourceClasses()[resourceClassIri];\n\n            }\n        );\n\n    }\n\n}",
    "ctx": {
      "type": "method",
      "name": "getPropertiesForResourceClass",
      "string": "getPropertiesForResourceClass()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Validates form and returns its status (boolean).",
        "html": "<p>Validates form and returns its status (boolean).</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 185,
    "codeStart": 189,
    "code": "private validateForm() {\n\n    // check that either a resource class is selected or at least one property is specified\n    return this.form.valid &&\n        (this.propertyComponents.length > 0 || (this.resourceClassComponent !== undefined && this.resourceClassComponent.getResourceClassSelected() !== false));\n\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Resets the form (selected resource class and specified properties) preserving the active ontology.",
        "html": "<p>Resets the form (selected resource class and specified properties) preserving the active ontology.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 197,
    "codeStart": 201,
    "code": "resetForm() {\n    if (this.activeOntology !== undefined) {\n        this.getResourceClassesAndPropertiesForOntology(this.activeOntology);\n    }\n}",
    "ctx": {
      "type": "method",
      "name": "resetForm",
      "string": "resetForm()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "Creates a GravSearch query with the given form values and calls the extended search route.",
        "html": "<p>Creates a GravSearch query with the given form values and calls the extended search route.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 208,
    "codeStart": 212,
    "code": "submit() {\n\n    if (!this.formValid) return; // check that from is valid\n\n    const resClassOption = this.resourceClassComponent.getResourceClassSelected();\n\n    let resClass;\n\n    if (resClassOption !== false) {\n        resClass = resClassOption;\n    }\n\n    const properties: PropertyWithValue[] = this.propertyComponents.map(\n        (propComp) => {\n            return propComp.getPropertySelectedWithValue();\n        }\n    );\n\n    const gravsearch = this._gravSearchService.createGravsearchQuery(properties, resClass, 0);\n\n    if (this.route) {\n        this._router.navigate([this.route + '/extended/', gravsearch], { relativeTo: this._route });\n    } else {\n        this.gravsearch.emit(gravsearch);\n    }\n\n    // toggle extended search form\n    this.toggleExtendedSearchForm.emit(true);\n\n}\n\n}",
    "ctx": {
      "type": "method",
      "name": "submit",
      "string": "submit()"
    }
  }
]