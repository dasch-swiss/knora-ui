[
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "line": 1,
    "codeStart": null,
    "code": "import { Component, Inject, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IRI, KnoraConstants, ListNodeV2, Property, PropertyValue, Value } from '@knora/core';\nimport { ListCacheService } from '@knora/core';\nimport { MatMenuTrigger } from '@angular/material';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'list-value',\n    templateUrl: './list-value.component.html',\n    styleUrls: ['./list-value.component.scss', '../../../../assets/style/search.scss']\n})\nexport class ListValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup?: FormGroup;\n\n    type = KnoraConstants.ListValue;\n\n    form: FormGroup;\n\n    @Input() property?: Property;\n\n    listRootNode: ListNodeV2;\n\n    // activeNode;\n\n    selectedNode: ListNodeV2;\n\n    @ViewChild(MatMenuTrigger) menuTrigger: MatMenuTrigger;\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder, private _listCacheService: ListCacheService) {\n    }\n\n    private getRootNodeIri(): string {\n        const guiAttr = this.property.guiAttribute;\n\n        if (guiAttr.length === 1 && guiAttr[0].startsWith('hlist=')) {\n            const listNodeIri = guiAttr[0].substr(7, guiAttr[0].length - (1 + 7)); // hlist=<>, get also rid of <>\n            return listNodeIri;\n        } else {\n            console.log('No root node Iri given for property');\n        }\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            listValue: [null, Validators.required]\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n        const rootNodeIri = this.getRootNodeIri();\n\n        this._listCacheService.getList(rootNodeIri).subscribe(\n            (list: ListNodeV2) => {\n                this.listRootNode = list;\n            }\n        );\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n        return new IRI(this.form.value.listValue);\n    }\n\n    getSelectedNode(item: ListNodeV2) {\n        this.menuTrigger.closeMenu();\n        this.selectedNode = item;\n\n        this.form.controls['listValue'].setValue(item.id);\n    }\n\n}",
    "ctx": false
  }
]