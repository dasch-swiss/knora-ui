[
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "line": 1,
    "codeStart": null,
    "code": "import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n    ApiServiceError,\n    ApiServiceResult,\n    ConvertJSONLD,\n    IncomingService,\n    KnoraConstants,\n    OntologyCacheService,\n    OntologyInformation,\n    ReadResource,\n    ReadResourcesSequence,\n    ResourceService\n} from '@knora/core';\n\ndeclare let require: any;\nconst jsonld = require('jsonld');\n\n@Component({\n    selector: 'kui-resource-view',\n    templateUrl: './resource-view.component.html',\n    styleUrls: ['./resource-view.component.scss']\n})\nexport class ResourceViewComponent implements OnInit {\n\n    @Input() iri?: string = 'http://rdfh.ch/8be1b7cf7103';\n\n    ontologyInfo: OntologyInformation; // ontology information about resource classes and properties present in the requested resource with Iri `iri`\n    resource: ReadResource; // the resource to be displayed\n    errorMessage: any;\n\n    KnoraConstants = KnoraConstants;\n\n    constructor(private _route: ActivatedRoute,\n                private _resourceService: ResourceService,\n                private _cacheService: OntologyCacheService,\n                private _incomingService: IncomingService) {\n\n        const routeParams = this._route.snapshot.params;\n        this.iri = routeParams.id;\n\n    }\n\n    ngOnInit() {\n        this.getResource(this.iri);\n    }\n\n    private getResource(iri: string): void {\n        iri = decodeURIComponent(iri);\n\n        this._resourceService.getResource(iri)\n            .subscribe(\n                (result: ApiServiceResult) => {\n                    console.log('result: ', result.body);\n                    const promises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const promise = promises.compact(result.body, {});\n\n                    promise.then((compacted) => {\n\n                        const resourceSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(compacted);\n\n                        // make sure that exactly one resource is returned\n                        if (resourceSeq.resources.length === 1) {\n\n                            // get resource class Iris from response\n                            const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(compacted);\n\n                            // request ontology information about resource class Iris (properties are implied)\n                            this._cacheService.getResourceClassDefinitions(resourceClassIris).subscribe(\n                                (resourceClassInfos: any) => {\n                                    // initialize ontology information\n                                    this.ontologyInfo = resourceClassInfos; // console.log('initialization of ontologyInfo: ', this.ontologyInfo); > object received\n\n                                    // prepare a possibly attached image file to be displayed\n                                    // this.collectImagesAndRegionsForResource(resourceSeq.resources[0]);\n\n                                    this.resource = resourceSeq.resources[0];\n                                    // console.log('resource: ', this.resource);\n\n                                    // this.requestIncomingResources();\n                                },\n                                (err) => {\n\n                                    console.log('cache request failed: ' + err);\n                                });\n                        } else {\n                            // exactly one resource was expected, but resourceSeq.resources.length != 1\n                            this.errorMessage = `Exactly one resource was expected, but ${resourceSeq.resources.length} resource(s) given.`;\n                        }\n                    }, function (err) {\n                        console.error('JSONLD of full resource request could not be expanded:' + err);\n                    });\n                    // this.isLoading = false;\n                },\n                (error: ApiServiceError) => {\n                    console.error(error);\n                    // this.errorMessage = <any>error;\n                    // this.isLoading = false;\n                });\n    }\n\n}",
    "ctx": false
  }
]