[
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nThis component has been moved to knora/action. Update your import path.",
        "html": "<p>since v9.5.0<br />\nThis component has been moved to knora/action. Update your import path.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 8,
    "codeStart": 13,
    "code": "@Component({\n    selector: 'kui-login-form',\n    templateUrl: './login-form.component.html',\n    styleUrls: ['./login-form.component.scss']\n})\nexport class LoginFormComponent implements OnInit {",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "\nThis will be removed in the next major release; this should be handled by the app itself with the new Output parameter called 'status'",
        "html": "<p>This will be removed in the next major release; this should be handled by the app itself with the new Output parameter called 'status'</p>"
      },
      {
        "type": "param",
        "string": "{string} [navigate]\nnavigate to the defined url after successful login",
        "name": "[navigate]",
        "description": "<p>navigate to the defined url after successful login</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 20,
    "codeStart": 28,
    "code": "@Input() navigate?: string;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [color]\nset your theme color here,\nit will be used in the progress-indicator and login button",
        "name": "[color]",
        "description": "<p>set your theme color here,<br />\nit will be used in the progress-indicator and login button</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 30,
    "codeStart": 35,
    "code": "@Input() color?: string;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{EventEmitter<boolean>} status\n\nEmits true when the login process was successful and false in case of error on login or false after logout process",
        "name": "status",
        "description": "<p>Emits true when the login process was successful and false in case of error on login or false after logout process</p>",
        "types": [
          "EventEmitter.<boolean>"
        ],
        "typesDescription": "<a href=\"EventEmitter.html\">EventEmitter</a>.&lt;<code>boolean</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 37,
    "codeStart": 42,
    "code": "@Output() status: EventEmitter<boolean> = new EventEmitter<boolean>();\n\nreturnUrl: string;\n\n// is there already a valid session?\nloggedInUser: string;\n\n// form\nform: FormGroup;\n\nloading = false;\n\n// general error message\nerrorMessage: any;\n\n// specific error messages\nloginErrorUser = false;\nloginErrorPw = false;\nloginErrorServer = false;\n\n// labels for the login form\nformLabel = {\n    title: 'Login here',\n    name: 'Username',\n    pw: 'Password',\n    submit: 'Login',\n    retry: 'Retry',\n    logout: 'LOGOUT',\n    remember: 'Remember me',\n    forgot_pw: 'Forgot password?',\n    error: {\n        failed: 'Password or username is wrong',\n        server: 'There\\'s an error with the server connection. Try it again later or inform the Knora Team'\n    }\n};\n\n// error definitions for the following form fields\nformErrors = {\n    'username': '',\n    'password': ''\n};\n\n// error messages for the form fields defined in formErrors\nvalidationMessages = {\n    'username': {\n        'required': 'user name is required.'\n    },\n    'password': {\n        'required': 'password is required'\n    }\n};\n\n\nconstructor(private _auth: AuthenticationService,\n    private _session: SessionService,\n    private _fb: FormBuilder) {\n}\n\n\nngOnInit() {\n\n    // check if a user is already logged in\n    if (this._session.validateSession()) {\n        this.loggedInUser = JSON.parse(localStorage.getItem('session')).user.name;\n    } else {\n        this.buildForm();\n    }\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 111,
    "codeStart": 114,
    "code": "buildForm(): void {\n    this.form = this._fb.group({\n        username: ['', Validators.required],\n        password: ['', Validators.required]\n    });\n\n}",
    "ctx": {
      "type": "method",
      "name": "buildForm",
      "string": "buildForm()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 122,
    "codeStart": 125,
    "code": "login() {\n\n    this.loading = true;\n\n    // reset the error messages\n    this.errorMessage = undefined;\n\n    // Grab values from form\n    const username = this.form.get('username').value;\n    const password = this.form.get('password').value;\n\n    this._auth.login(username, password).subscribe(\n        (response: string) => {\n\n            this._session.setSession(response, username);\n\n            // successfull login: send status true to parent after a short timeout,\n            // because of the localStorage session setup which needs some time\n            setTimeout(() => {\n                this.status.emit(true);\n                this.loading = false;\n            }, 2200);\n\n        },\n        (error: ApiServiceError) => {\n            // error handling\n            this.loginErrorUser = (error.status === 404);\n            this.loginErrorPw = (error.status === 401);\n            this.loginErrorServer = (error.status === 0);\n\n            this.errorMessage = <any>error;\n            this.loading = false;\n        }\n    );\n\n}",
    "ctx": {
      "type": "method",
      "name": "login",
      "string": "login()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 162,
    "codeStart": 165,
    "code": "logout() {\n\n    this._auth.logout().subscribe(\n        (result: LogoutResponse) => {\n            this.status.emit(result.status === 0);\n            this.loading = false;\n        },\n        (error: ApiServiceError) => {\n            console.error(error);\n            this.loading = false;\n        }\n    );\n\n}\n\n}",
    "ctx": {
      "type": "method",
      "name": "logout",
      "string": "logout()"
    }
  }
]