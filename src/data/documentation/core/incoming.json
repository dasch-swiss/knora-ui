[
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} resourceIRI the Iri of the resource whose Incoming regions should be returned.",
        "name": "resourceIRI",
        "description": "<p>the Iri of the resource whose Incoming regions should be returned.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.",
        "name": "offset",
        "description": "<p>the offset to be used for paging. 0 is the default and is used to get the first page of results.</p>",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>Returns all incoming regions for a particular resource.</p>",
      "summary": "<p>Returns all incoming regions for a particular resource.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 10,
    "codeStart": 17,
    "code": "getIncomingRegions(resourceIRI: string, offset: number): Observable<any> {\n    const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?region knora-api:isMainResource true .\n\n?region knora-api:hasGeometry ?geom .\n\n?region knora-api:hasComment ?comment .\n\n?region knora-api:hasColor ?color .\n} WHERE {\n?region a knora-api:Region .\n?region a knora-api:Resource .\n\n?region knora-api:isRegionOf <${resourceIRI}> .\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\n\n<${resourceIRI}> a knora-api:Resource .\n\n?region knora-api:hasGeometry ?geom .\nknora-api:hasGeometry knora-api:objectType knora-api:Geom .\n\n?geom a knora-api:Geom .\n\n?region knora-api:hasComment ?comment .\nknora-api:hasComment knora-api:objectType xsd:string .\n\n?comment a xsd:string .\n\n?region knora-api:hasColor ?color .\nknora-api:hasColor knora-api:objectType knora-api:Color .\n\n?color a knora-api:Color .\n} OFFSET ${offset}\n`;\n    // console.log('sparqlQueryStr ', sparqlQueryStr);\n    return this.doExtendedSearch(sparqlQueryStr);\n}",
    "ctx": {
      "type": "method",
      "name": "getIncomingRegions",
      "string": "getIncomingRegions()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} resourceIri the Iri of the resource whose StillImageRepresentations should be returned.",
        "name": "resourceIri",
        "description": "<p>the Iri of the resource whose StillImageRepresentations should be returned.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.",
        "name": "offset",
        "description": "<p>the offset to be used for paging. 0 is the default and is used to get the first page of results.</p>",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>Returns all the StillImageRepresentations for the given resource, if any.<br />\nStillImageRepresentations link to the given resource via knora-base:isPartOf.</p>",
      "summary": "<p>Returns all the StillImageRepresentations for the given resource, if any.<br />\nStillImageRepresentations link to the given resource via knora-base:isPartOf.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 58,
    "codeStart": 66,
    "code": "getStillImageRepresentationsForCompoundResource(resourceIri: string, offset: number): Observable<any> {\n    const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?page knora-api:isMainResource true .\n\n?page knora-api:seqnum ?seqnum .\n\n?page knora-api:hasStillImageFile ?file .\n} WHERE {\n\n?page a knora-api:StillImageRepresentation .\n?page a knora-api:Resource .\n\n?page knora-api:isPartOf <${resourceIri}> .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\n<${resourceIri}> a knora-api:Resource .\n\n?page knora-api:seqnum ?seqnum .\nknora-api:seqnum knora-api:objectType xsd:integer .\n\n?seqnum a xsd:integer .\n\n?page knora-api:hasStillImageFile ?file .\nknora-api:hasStillImageFile knora-api:objectType knora-api:File .\n\n?file a knora-api:File .\n\n} ORDER BY ?seqnum\nOFFSET ${offset}\n`;\n\n    return this.doExtendedSearch(sparqlQueryStr);\n\n}",
    "ctx": {
      "type": "method",
      "name": "getStillImageRepresentationsForCompoundResource",
      "string": "getStillImageRepresentationsForCompoundResource()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} resourceIri the Iri of the resource whose incoming links should be returned.",
        "name": "resourceIri",
        "description": "<p>the Iri of the resource whose incoming links should be returned.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.",
        "name": "offset",
        "description": "<p>the offset to be used for paging. 0 is the default and is used to get the first page of results.</p>",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>Returns all incoming links for the given resource Iri<br />\nbut incoming regions and still image representations.</p>",
      "summary": "<p>Returns all incoming links for the given resource Iri<br />\nbut incoming regions and still image representations.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 105,
    "codeStart": 114,
    "code": "getIncomingLinksForResource(resourceIri: string, offset: number): Observable<any> {\n    const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?incomingRes knora-api:isMainResource true .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n} WHERE {\n\n?incomingRes a knora-api:Resource .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n<${resourceIri}> a knora-api:Resource .\n\n?incomingProp knora-api:objectType knora-api:Resource .\n\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isRegionOf <${resourceIri}> .\n}\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isPartOf <${resourceIri}> .\n}\n\n} OFFSET ${offset}\n`;\n\n    return this.doExtendedSearch(sparqlQueryStr);\n}\n\n}",
    "ctx": {
      "type": "method",
      "name": "getIncomingLinksForResource",
      "string": "getIncomingLinksForResource()"
    }
  }
]