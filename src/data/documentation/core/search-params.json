[
  {
    "tags": [],
    "description": {
      "full": "<p>Represents teh parameters of an extended search.</p>",
      "summary": "<p>Represents teh parameters of an extended search.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 8,
    "code": "export class ExtendedSearchParams {",
    "ctx": {
      "type": "class",
      "constructor": "ExtendedSearchParams",
      "cons": "ExtendedSearchParams",
      "name": "ExtendedSearchParams",
      "extends": "",
      "string": "new ExtendedSearchParams()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "generateGravsearch a function the generates KnarQL.\n                      The function is expected to take the offset\n                      as a parameter and return a KnarQL query string.",
        "name": "generateGravsearch",
        "description": "<p>a function the generates KnarQL.                       The function is expected to take the offset<br />\nas a parameter and return a KnarQL query string.</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 10,
    "codeStart": 16,
    "code": "constructor(public generateGravsearch: (offset: number) => string) {\n\n}\n\n}\n\n@Injectable({\nprovidedIn: 'root'\n})",
    "ctx": {
      "type": "constructor",
      "constructor": "ExtendedSearchParams",
      "cons": "ExtendedSearchParams",
      "name": "constructor",
      "string": "ExtendedSearchParams.prototype.constructor()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Temporarily stores the parameters of an extended search.</p>",
      "summary": "<p>Temporarily stores the parameters of an extended search.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 25,
    "codeStart": 28,
    "code": "export class SearchParamsService {\n\n    // init with a dummy function\n    private searchParamsMessage = new BehaviorSubject<ExtendedSearchParams>(new ExtendedSearchParams((offset: number) => ''));\n    currentSearchParams = this.searchParamsMessage.asObservable();\n\n    constructor() {\n    }",
    "ctx": {
      "type": "class",
      "constructor": "SearchParamsService",
      "cons": "SearchParamsService",
      "name": "SearchParamsService",
      "extends": "",
      "string": "new SearchParamsService()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{ExtendedSearchParams} searchParams",
        "name": "searchParams",
        "description": "",
        "types": [
          "ExtendedSearchParams"
        ],
        "typesDescription": "<a href=\"ExtendedSearchParams.html\">ExtendedSearchParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ExtendedSearchParams} searchParams</p>"
      }
    ],
    "description": {
      "full": "<p>Update the parameters of an extended seacrh.</p>",
      "summary": "<p>Update the parameters of an extended seacrh.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 37,
    "codeStart": 42,
    "code": "changeSearchParamsMsg(searchParams: ExtendedSearchParams): void {\n    this.searchParamsMessage.next(searchParams);\n}\n\n}",
    "ctx": {
      "type": "method",
      "constructor": "SearchParamsService",
      "cons": "SearchParamsService",
      "name": "changeSearchParamsMsg",
      "string": "SearchParamsService.prototype.changeSearchParamsMsg()"
    }
  }
]