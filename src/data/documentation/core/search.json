[
  {
    "tags": [],
    "description": {
      "full": "<p>Performs searches (fulltext or extended) and search count queries into Knora.</p>",
      "summary": "<p>Performs searches (fulltext or extended) and search count queries into Knora.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 27,
    "codeStart": 30,
    "code": "@Injectable({\n    providedIn: 'root',\n})\nexport class SearchService extends ApiService {\n\n    constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{FulltextSearchParams} params",
        "name": "params",
        "description": "",
        "types": [
          "FulltextSearchParams"
        ],
        "typesDescription": "<a href=\"FulltextSearchParams.html\">FulltextSearchParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{FulltextSearchParams} params</p>"
      },
      {
        "type": "param",
        "string": "{HttpParams} httpParams",
        "name": "httpParams",
        "description": "",
        "types": [
          "HttpParams"
        ],
        "typesDescription": "<a href=\"HttpParams.html\">HttpParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{HttpParams} httpParams</p>"
      },
      {
        "type": "returns",
        "string": "{HttpParams}",
        "types": [
          "HttpParams"
        ],
        "typesDescription": "<a href=\"HttpParams.html\">HttpParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{HttpParams}</p>"
      }
    ],
    "description": {
      "full": "<p>Assign fulltext search params to http params.</p>",
      "summary": "<p>Assign fulltext search params to http params.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 41,
    "codeStart": 48,
    "code": "private processFulltextSearchParams(params: FulltextSearchParams, httpParams: HttpParams): HttpParams {\n\n    // avoid reassignment to method param\n    let searchParams = httpParams;\n\n    // HttpParams is immutable, `set` returns a new instance\n\n    if (params.limitToProject !== undefined) {\n        searchParams = searchParams.set('limitToProject', params.limitToProject);\n    }\n\n    if (params.limitToResourceClass !== undefined) {\n        searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n    }\n\n    if (params.limitToStandoffClass !== undefined) {\n        searchParams = searchParams.set('limitToStandoffClass', params.limitToStandoffClass);\n    }\n\n    return searchParams;\n\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{SearchByLabelParams} params",
        "name": "params",
        "description": "",
        "types": [
          "SearchByLabelParams"
        ],
        "typesDescription": "<a href=\"SearchByLabelParams.html\">SearchByLabelParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{SearchByLabelParams} params</p>"
      },
      {
        "type": "param",
        "string": "{HttpParams} httpParams",
        "name": "httpParams",
        "description": "",
        "types": [
          "HttpParams"
        ],
        "typesDescription": "<a href=\"HttpParams.html\">HttpParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{HttpParams} httpParams</p>"
      },
      {
        "type": "returns",
        "string": "{HttpParams}",
        "types": [
          "HttpParams"
        ],
        "typesDescription": "<a href=\"HttpParams.html\">HttpParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{HttpParams}</p>"
      }
    ],
    "description": {
      "full": "<p>Assign search by label search params to http params.</p>",
      "summary": "<p>Assign search by label search params to http params.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 70,
    "codeStart": 77,
    "code": "private processSearchByLabelParams(params: SearchByLabelParams, httpParams: HttpParams): HttpParams {\n\n    // avoid reassignment to method param\n    let searchParams = httpParams;\n\n    // HttpParams is immutable, `set` returns a new instance\n\n    if (params.limitToResourceClass !== undefined) {\n        searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n    }\n\n    if (params.limitToProject !== undefined) {\n        searchParams = searchParams.set('limitToProject', params.limitToProject);\n    }\n\n    return searchParams;\n\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "\nConverts a JSON-LD object to a `ReadResorceSequence`.\nTo be passed as a function pointer (arrow notation required).",
        "html": "<p>Converts a JSON-LD object to a <code>ReadResorceSequence</code>.<br />\nTo be passed as a function pointer (arrow notation required).</p>"
      },
      {
        "type": "param",
        "string": "{Object} resourceResponse",
        "name": "resourceResponse",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} resourceResponse</p>"
      },
      {
        "type": "returns",
        "string": "{Observable<ReadResourcesSequence>}",
        "types": [
          "Observable.<ReadResourcesSequence>"
        ],
        "typesDescription": "<a href=\"Observable.html\">Observable</a>.&lt;<a href=\"ReadResourcesSequence.html\">ReadResourcesSequence</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Observable<ReadResourcesSequence>}</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 96,
    "codeStart": 105,
    "code": "private convertJSONLDToReadResourceSequence: (resourceResponse: Object) => Observable<ReadResourcesSequence> = (resourceResponse: Object) => {\n    // convert JSON-LD into a ReadResourceSequence\n    const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n    // collect resource class Iris\n    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n    // request information about resource classes\n    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n        map(\n            (ontoInfo: OntologyInformation) => {\n                // add ontology information to ReadResourceSequence\n                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                return resSeq;\n            }\n        )\n    );\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} resourceResponse",
        "name": "resourceResponse",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} resourceResponse</p>"
      }
    ],
    "description": {
      "full": "<p>Converts a JSON-LD object to a <code>ResourcesSequence</code></p>",
      "summary": "<p>Converts a JSON-LD object to a <code>ResourcesSequence</code></p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 123,
    "codeStart": 128,
    "code": "private convertJSONLDToResourcesSequence: (resourceResponse: Object) => Observable<ResourcesSequence> = (resourceResponse: Object) => {\n    // convert JSON-LD into a ResourcesSequence\n    const resSeq: ResourcesSequence = ConvertJSONLD.createResourcesSequenceFromJsonLD(resourceResponse);\n\n    // collect resource class Iris\n    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n    // request information about resource classes\n    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n        map(\n            (ontoInfo: OntologyInformation) => {\n                // add ontology information to ResourcesSequence\n                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                return resSeq;\n            }\n        )\n    );\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} searchTerm the term to search for.",
        "name": "searchTerm",
        "description": "<p>the term to search for.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} offset the offset to be used (for paging, first offset is 0).",
        "name": "offset",
        "description": "<p>the offset to be used (for paging, first offset is 0).</p>",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{FulltextSearchParams} params restrictions, if any.",
        "name": "params",
        "description": "<p>restrictions, if any.</p>",
        "types": [
          "FulltextSearchParams"
        ],
        "typesDescription": "<a href=\"FulltextSearchParams.html\">FulltextSearchParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult></p>"
      }
    ],
    "description": {
      "full": "<p>Performs a fulltext search.<br />\nTODO: mark as deprecated, use of <code>doFullTextSearchReadResourceSequence</code> recommended</p>",
      "summary": "<p>Performs a fulltext search.<br />\nTODO: mark as deprecated, use of <code>doFullTextSearchReadResourceSequence</code> recommended</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 147,
    "codeStart": 156,
    "code": "doFulltextSearch(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n    if (searchTerm === undefined || searchTerm.length === 0) {\n        return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n    }\n\n    let httpParams = new HttpParams();\n\n    httpParams = httpParams.set('offset', offset.toString());\n\n    if (params !== undefined) {\n        httpParams = this.processFulltextSearchParams(params, httpParams);\n    }\n\n    return this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n}",
    "ctx": {
      "type": "method",
      "name": "doFulltextSearch",
      "string": "doFulltextSearch()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} searchTerm the term to search for.",
        "name": "searchTerm",
        "description": "<p>the term to search for.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} offset the offset to be used (for paging, first offset is 0).",
        "name": "offset",
        "description": "<p>the offset to be used (for paging, first offset is 0).</p>",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{FulltextSearchParams} params restrictions, if any.",
        "name": "params",
        "description": "<p>restrictions, if any.</p>",
        "types": [
          "FulltextSearchParams"
        ],
        "typesDescription": "<a href=\"FulltextSearchParams.html\">FulltextSearchParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult></p>"
      }
    ],
    "description": {
      "full": "<p>Performs a fulltext search and turns the result into a <code>ReadResourceSequence</code>.</p>",
      "summary": "<p>Performs a fulltext search and turns the result into a <code>ReadResourceSequence</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 173,
    "codeStart": 181,
    "code": "doFullTextSearchReadResourceSequence(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ReadResourcesSequence> {\n    if (searchTerm === undefined || searchTerm.length === 0) {\n        return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n    }\n\n    let httpParams = new HttpParams();\n\n    httpParams = httpParams.set('offset', offset.toString());\n\n    if (params !== undefined) {\n        httpParams = this.processFulltextSearchParams(params, httpParams);\n    }\n\n    const res: Observable<any> = this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n\n    return res.pipe(\n        mergeMap(\n            // this would return an Observable of a PromiseObservable -> combine them into one Observable\n            this.processJSONLD\n        ),\n        mergeMap(\n            // return Observable of ReadResourcesSequence\n            this.convertJSONLDToReadResourceSequence\n        )\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "doFullTextSearchReadResourceSequence",
      "string": "doFullTextSearchReadResourceSequence()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "searchTerm the term to search for.",
        "name": "searchTerm",
        "description": "<p>the term to search for.</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "param",
        "string": "{FulltextSearchParams} params restrictions, if any.",
        "name": "params",
        "description": "<p>restrictions, if any.</p>",
        "types": [
          "FulltextSearchParams"
        ],
        "typesDescription": "<a href=\"FulltextSearchParams.html\">FulltextSearchParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult></p>"
      }
    ],
    "description": {
      "full": "<p>Performs a fulltext search count query.<br />\nTODO: mark as deprecated, use of <code>doFullTextSearchCountQueryCountQueryResult</code> recommended</p>",
      "summary": "<p>Performs a fulltext search count query.<br />\nTODO: mark as deprecated, use of <code>doFullTextSearchCountQueryCountQueryResult</code> recommended</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 208,
    "codeStart": 216,
    "code": "doFulltextSearchCountQuery(searchTerm: string, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n    if (searchTerm === undefined || searchTerm.length === 0) {\n        return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n    }\n\n    let httpParams = new HttpParams();\n\n    if (params !== undefined) {\n        httpParams = this.processFulltextSearchParams(params, httpParams);\n    }\n\n    return this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n}",
    "ctx": {
      "type": "method",
      "name": "doFulltextSearchCountQuery",
      "string": "doFulltextSearchCountQuery()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} searchTerm the term to search for.",
        "name": "searchTerm",
        "description": "<p>the term to search for.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{FulltextSearchParams} params restrictions, if any.",
        "name": "params",
        "description": "<p>restrictions, if any.</p>",
        "types": [
          "FulltextSearchParams"
        ],
        "typesDescription": "<a href=\"FulltextSearchParams.html\">FulltextSearchParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<CountQueryResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<CountQueryResult></p>"
      }
    ],
    "description": {
      "full": "<p>Performs a fulltext search count query and turns the result into a <code>CountQueryResult</code>.</p>",
      "summary": "<p>Performs a fulltext search count query and turns the result into a <code>CountQueryResult</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 231,
    "codeStart": 238,
    "code": "doFullTextSearchCountQueryCountQueryResult(searchTerm: string, params?: FulltextSearchParams): Observable<CountQueryResult> {\n\n    if (searchTerm === undefined || searchTerm.length === 0) {\n        return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n    }\n\n    let httpParams = new HttpParams();\n\n    if (params !== undefined) {\n        httpParams = this.processFulltextSearchParams(params, httpParams);\n    }\n\n    const res = this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n\n    return res.pipe(\n        mergeMap(\n            // this would return an Observable of a PromiseObservable -> combine them into one Observable\n            this.processJSONLD\n        ),\n        map(\n            // convert to a `CountQueryResult`\n            ConvertJSONLD.createCountQueryResult\n        )\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "doFullTextSearchCountQueryCountQueryResult",
      "string": "doFullTextSearchCountQueryCountQueryResult()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "gravsearchQuery the Sparql query string to be sent to Knora.",
        "name": "gravsearchQuery",
        "description": "<p>the Sparql query string to be sent to Knora.</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult></p>"
      }
    ],
    "description": {
      "full": "<p>Performs an extended search.<br />\nTODO: mark as deprecated, use of <code>doExtendedSearchReadResourceSequence</code> recommended</p>",
      "summary": "<p>Performs an extended search.<br />\nTODO: mark as deprecated, use of <code>doExtendedSearchReadResourceSequence</code> recommended</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 264,
    "codeStart": 271,
    "code": "doExtendedSearch(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n    if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n        return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n    }\n\n    return this.httpPost('/v2/searchextended', gravsearchQuery);\n}",
    "ctx": {
      "type": "method",
      "name": "doExtendedSearch",
      "string": "doExtendedSearch()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "Performs an extended search and turns the result into a `ReadResourceSequence`.",
        "html": "<p>Performs an extended search and turns the result into a <code>ReadResourceSequence</code>.</p>"
      },
      {
        "type": "param",
        "string": "gravsearchQuery the Sparql query string to be sent to Knora.",
        "name": "gravsearchQuery",
        "description": "<p>the Sparql query string to be sent to Knora.</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult></p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 280,
    "codeStart": 287,
    "code": "doExtendedSearchReadResourceSequence(gravsearchQuery: string): Observable<ReadResourcesSequence> {\n\n    if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n        return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n    }\n\n    const res = this.httpPost('/v2/searchextended', gravsearchQuery);\n\n    return res.pipe(\n        mergeMap(\n            this.processJSONLD\n        ),\n        mergeMap(\n            this.convertJSONLDToReadResourceSequence\n        )\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "doExtendedSearchReadResourceSequence",
      "string": "doExtendedSearchReadResourceSequence()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} gravsearchQuery",
        "name": "gravsearchQuery",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} gravsearchQuery</p>"
      },
      {
        "type": "returns",
        "string": "Observable",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable</p>"
      }
    ],
    "description": {
      "full": "<p>Performs an extended search and turns the result into a <code>ResourcesSequence</code>.</p>",
      "summary": "<p>Performs an extended search and turns the result into a <code>ResourcesSequence</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 304,
    "codeStart": 310,
    "code": "doExtendedSearchResourcesSequence(gravsearchQuery: string): Observable<ResourcesSequence> {\n\n    if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n        return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n    }\n\n    const res = this.httpPost('/v2/searchextended', gravsearchQuery);\n\n    return res.pipe(\n        mergeMap(\n            this.processJSONLD\n        ),\n        mergeMap(\n            this.convertJSONLDToResourcesSequence\n        )\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "doExtendedSearchResourcesSequence",
      "string": "doExtendedSearchResourcesSequence()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} gravsearchQuery the Sparql query string to be sent to Knora.",
        "name": "gravsearchQuery",
        "description": "<p>the Sparql query string to be sent to Knora.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult></p>"
      }
    ],
    "description": {
      "full": "<p>Performs an extended search count query.<br />\nTODO: mark as deprecated, use of <code>doExtendedSearchReadResourceSequence</code> recommended</p>",
      "summary": "<p>Performs an extended search count query.<br />\nTODO: mark as deprecated, use of <code>doExtendedSearchReadResourceSequence</code> recommended</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 328,
    "codeStart": 335,
    "code": "doExtendedSearchCountQuery(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n    if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n        return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n    }\n\n    return this.httpPost('/v2/searchextended/count', gravsearchQuery);\n}",
    "ctx": {
      "type": "method",
      "name": "doExtendedSearchCountQuery",
      "string": "doExtendedSearchCountQuery()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "gravsearchQuery the Sparql query string to be sent to Knora.",
        "name": "gravsearchQuery",
        "description": "<p>the Sparql query string to be sent to Knora.</p>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult></p>"
      }
    ],
    "description": {
      "full": "<p>Performs an extended search count query and turns the result into a <code>CountQueryResult</code>.</p>",
      "summary": "<p>Performs an extended search count query and turns the result into a <code>CountQueryResult</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 344,
    "codeStart": 350,
    "code": "doExtendedSearchCountQueryCountQueryResult(gravsearchQuery: string): Observable<CountQueryResult> {\n\n    if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n        return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n    }\n\n    const res = this.httpPost('/v2/searchextended/count', gravsearchQuery);\n\n    return res.pipe(\n        mergeMap(\n            // this would return an Observable of a PromiseObservable -> combine them into one Observable\n            this.processJSONLD\n        ),\n        map(\n            // convert to a `CountQueryResult`\n            ConvertJSONLD.createCountQueryResult\n        )\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "doExtendedSearchCountQueryCountQueryResult",
      "string": "doExtendedSearchCountQueryCountQueryResult()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} searchTerm the term to search for.",
        "name": "searchTerm",
        "description": "<p>the term to search for.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} offset offset to use.",
        "name": "offset",
        "description": "<p>offset to use.</p>",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{FulltextSearchParams} params restrictions, if any.",
        "name": "params",
        "description": "<p>restrictions, if any.</p>",
        "types": [
          "FulltextSearchParams"
        ],
        "typesDescription": "<a href=\"FulltextSearchParams.html\">FulltextSearchParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult></p>"
      }
    ],
    "description": {
      "full": "<p>Perform a search by a resource's rdfs:label.<br />\nTODO: mark as deprecated, use of <code>searchByLabelReadResourceSequence</code> recommended</p>",
      "summary": "<p>Perform a search by a resource's rdfs:label.<br />\nTODO: mark as deprecated, use of <code>searchByLabelReadResourceSequence</code> recommended</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 370,
    "codeStart": 379,
    "code": "searchByLabel(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ApiServiceResult> {\n\n    if (searchTerm === undefined || searchTerm.length === 0) {\n        return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n    }\n\n    let httpParams: HttpParams = new HttpParams();\n\n    httpParams = httpParams.set('offset', offset.toString());\n\n    if (params !== undefined) {\n        httpParams = this.processSearchByLabelParams(params, httpParams);\n    }\n\n    // httpGet() expects only one argument, not 2\n    return this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n}",
    "ctx": {
      "type": "method",
      "name": "searchByLabel",
      "string": "searchByLabel()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} searchTerm the term to search for.",
        "name": "searchTerm",
        "description": "<p>the term to search for.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} offset offset to use.",
        "name": "offset",
        "description": "<p>offset to use.</p>",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{FulltextSearchParams} params restrictions, if any.",
        "name": "params",
        "description": "<p>restrictions, if any.</p>",
        "types": [
          "FulltextSearchParams"
        ],
        "typesDescription": "<a href=\"FulltextSearchParams.html\">FulltextSearchParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult>",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult></p>"
      }
    ],
    "description": {
      "full": "<p>Perform a search by a resource's rdfs:label and turns the results in a <code>ReadResourceSequence</code>.</p>",
      "summary": "<p>Perform a search by a resource's rdfs:label and turns the results in a <code>ReadResourceSequence</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 398,
    "codeStart": 406,
    "code": "searchByLabelReadResourceSequence(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ReadResourcesSequence> {\n\n    if (searchTerm === undefined || searchTerm.length === 0) {\n        return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n    }\n\n    let httpParams: HttpParams = new HttpParams();\n\n    httpParams = httpParams.set('offset', offset.toString());\n\n    if (params !== undefined) {\n        httpParams = this.processSearchByLabelParams(params, httpParams);\n    }\n\n    const res = this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n    return res.pipe(\n        mergeMap(\n            this.processJSONLD\n        ),\n        mergeMap(\n            this.convertJSONLDToReadResourceSequence\n        )\n    );\n}\n}",
    "ctx": {
      "type": "method",
      "name": "searchByLabelReadResourceSequence",
      "string": "searchByLabelReadResourceSequence()"
    }
  }
]