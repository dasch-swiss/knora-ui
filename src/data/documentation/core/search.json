[
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} searchTerm the term to search for.",
        "name": "searchTerm",
        "description": "<p>the term to search for.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} offset the offset to be used (for paging, first offset is 0).",
        "name": "offset",
        "description": "<p>the offset to be used (for paging, first offset is 0).</p>",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable of ApiServiceResult",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of ApiServiceResult</p>"
      }
    ],
    "description": {
      "full": "<p>Perform a fulltext search.</p>",
      "summary": "<p>Perform a fulltext search.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 11,
    "codeStart": 18,
    "code": "doFulltextSearch(searchTerm: string, offset: number = 0): Observable<ApiServiceResult> {\n\n    if (searchTerm === undefined || searchTerm.length === 0) {\n        return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n    }\n\n    return this.httpGet('/v2/search/' + searchTerm + '?offset=' + offset);\n}",
    "ctx": {
      "type": "method",
      "name": "doFulltextSearch",
      "string": "doFulltextSearch()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} searchTerm the term to search for.",
        "name": "searchTerm",
        "description": "<p>the term to search for.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable of ApiServiceResult",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of ApiServiceResult</p>"
      }
    ],
    "description": {
      "full": "<p>Perform a fulltext search count query.</p>",
      "summary": "<p>Perform a fulltext search count query.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 27,
    "codeStart": 33,
    "code": "doFulltextSearchCountQuery(searchTerm: string): Observable<ApiServiceResult> {\n\n    if (searchTerm === undefined || searchTerm.length === 0) {\n        return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n    }\n\n    return this.httpGet('/v2/search/count/' + searchTerm);\n}",
    "ctx": {
      "type": "method",
      "name": "doFulltextSearchCountQuery",
      "string": "doFulltextSearchCountQuery()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} sparqlString the Sparql query string to be sent to Knora.",
        "name": "sparqlString",
        "description": "<p>the Sparql query string to be sent to Knora.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable of ApiServiceResult",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of ApiServiceResult</p>"
      }
    ],
    "description": {
      "full": "<p>Perform an extended search.</p>",
      "summary": "<p>Perform an extended search.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 42,
    "codeStart": 48,
    "code": "doExtendedSearch(sparqlString: string): Observable<ApiServiceResult> {\n\n    if (sparqlString === undefined || sparqlString.length === 0) {\n        return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n    }\n\n    // return this.httpGet('/v2/searchextended/' + encodeURIComponent(sparqlString));\n    return this.httpPost('/v2/searchextended', sparqlString);\n\n}",
    "ctx": {
      "type": "method",
      "name": "doExtendedSearch",
      "string": "doExtendedSearch()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} sparqlString the Sparql query string to be sent to Knora.",
        "name": "sparqlString",
        "description": "<p>the Sparql query string to be sent to Knora.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable of ApiServiceResult",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of ApiServiceResult</p>"
      }
    ],
    "description": {
      "full": "<p>Perform an extended search count query.</p>",
      "summary": "<p>Perform an extended search count query.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 59,
    "codeStart": 65,
    "code": "doExtendedSearchCountQuery(sparqlString: string): Observable<ApiServiceResult> {\n\n    if (sparqlString === undefined || sparqlString.length === 0) {\n        return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n    }\n\n    // return this.httpGet('/v2/searchextended/count/' + encodeURIComponent(sparqlString));\n    return this.httpPost('/v2/searchextended/count', sparqlString);\n}",
    "ctx": {
      "type": "method",
      "name": "doExtendedSearchCountQuery",
      "string": "doExtendedSearchCountQuery()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} searchTerm the term to search for.",
        "name": "searchTerm",
        "description": "<p>the term to search for.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} resourceClassIRI restrict search to given resource class.",
        "name": "resourceClassIRI",
        "description": "<p>restrict search to given resource class.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} projectIri restrict search to given project.",
        "name": "projectIri",
        "description": "<p>restrict search to given project.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable of ApiServiceResult",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of ApiServiceResult</p>"
      }
    ],
    "description": {
      "full": "<p>Perform a search by a resource's rdfs:label.</p>",
      "summary": "<p>Perform a search by a resource's rdfs:label.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 75,
    "codeStart": 83,
    "code": "searchByLabel(searchTerm: string, resourceClassIRI?: string, projectIri?: string): Observable<ApiServiceResult> {\n\n    if (searchTerm === undefined || searchTerm.length === 0) {\n        return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n    }\n\n    const params = {};\n\n    if (resourceClassIRI !== undefined) {\n        params['limitToResourceClass'] = resourceClassIRI;\n    }\n\n    if (projectIri !== undefined) {\n        params['limitToProject'] = projectIri;\n    }\n\n    // httpGet() expects only one argument, not 2\n    return this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), params);\n    // return this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm));\n\n}\n}",
    "ctx": {
      "type": "method",
      "name": "searchByLabel",
      "string": "searchByLabel()"
    }
  }
]