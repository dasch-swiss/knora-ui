[
  {
    "tags": [],
    "description": {
      "full": "<p>Requests ontology information from Knora.</p>",
      "summary": "<p>Requests ontology information from Knora.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 11,
    "codeStart": 14,
    "code": "@Injectable({\n    providedIn: 'root',\n})\nexport class OntologyService extends ApiService {\n\n\n    // ------------------------------------------------------------------------\n    // GET list of ontologies\n    // ------------------------------------------------------------------------",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult> - the metadata of all ontologies.",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult> - the metadata of all ontologies.</p>"
      }
    ],
    "description": {
      "full": "<p>DEPRECATED: You should use getAllOntologies()<br />\nRequests the metadata about all existing ontologies from Knora's ontologies route.</p>",
      "summary": "<p>DEPRECATED: You should use getAllOntologies()<br />\nRequests the metadata about all existing ontologies from Knora's ontologies route.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 24,
    "codeStart": 30,
    "code": "getOntologiesMetadata(): Observable<ApiServiceResult> {\n    return this.httpGet('/v2/ontologies/metadata');\n}",
    "ctx": {
      "type": "method",
      "name": "getOntologiesMetadata",
      "string": "getOntologiesMetadata()"
    }
  },
  {
    "tags": [
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult> - the metadata of all ontologies.",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult> - the metadata of all ontologies.</p>"
      }
    ],
    "description": {
      "full": "<p>Requests the metadata about all existing ontologies from Knora's ontologies route.</p>",
      "summary": "<p>Requests the metadata about all existing ontologies from Knora's ontologies route.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 34,
    "codeStart": 39,
    "code": "getAllOntologies(): Observable<ApiServiceResult> {\n    return this.httpGet('/v2/ontologies/metadata');\n}",
    "ctx": {
      "type": "method",
      "name": "getAllOntologies",
      "string": "getAllOntologies()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "projectIri",
        "name": "projectIri",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>projectIri</p>"
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult> - the metadata of project ontologies.",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult> - the metadata of project ontologies.</p>"
      }
    ],
    "description": {
      "full": "<p>Requests the ontologies of a specific project</p>",
      "summary": "<p>Requests the ontologies of a specific project</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 43,
    "codeStart": 49,
    "code": "getProjectOntologies(projectIri: string): Observable<ApiServiceResult> {\n    return this.httpGet('/v2/ontologies/metadata/' + encodeURIComponent(projectIri));\n}\n\n\n// ------------------------------------------------------------------------\n// GET ontology\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "getProjectOntologies",
      "string": "getProjectOntologies()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} ontologyIri the Iris of the named graphs whose resource classes are to be returned.",
        "name": "ontologyIri",
        "description": "<p>the Iris of the named graphs whose resource classes are to be returned.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult> - the requested ontology.",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult> - the requested ontology.</p>"
      }
    ],
    "description": {
      "full": "<p>Requests all entity definitions for the given ontologies from Knora's ontologies route.</p>",
      "summary": "<p>Requests all entity definitions for the given ontologies from Knora's ontologies route.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 58,
    "codeStart": 64,
    "code": "getAllEntityDefinitionsForOntologies(ontologyIri: string): Observable<ApiServiceResult> {\n    return this.httpGet('/v2/ontologies/allentities/' + encodeURIComponent(ontologyIri));\n}",
    "ctx": {
      "type": "method",
      "name": "getAllEntityDefinitionsForOntologies",
      "string": "getAllEntityDefinitionsForOntologies()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string[]} resourceClassIris the Iris of the resource classes to be queried.",
        "name": "resourceClassIris",
        "description": "<p>the Iris of the resource classes to be queried.</p>",
        "types": [
          "Array.<string>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult> - the requested resource class definitions.",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult> - the requested resource class definitions.</p>"
      }
    ],
    "description": {
      "full": "<p>Requests information about the given resource classes from Knora's ontologies route.</p>",
      "summary": "<p>Requests information about the given resource classes from Knora's ontologies route.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 68,
    "codeStart": 74,
    "code": "getResourceClasses(resourceClassIris: Array<string>): Observable<ApiServiceResult> {\n\n    if (resourceClassIris.length === 0) {\n        // no resource class Iris are given to query for, return a failed Observer\n        return Observable.create(observer => observer.error('No resource class Iris given for call of OntologyService.getResourceClasses'));\n    }\n\n    let resClassUriEnc = '';\n\n    resourceClassIris.forEach(function (resClassIri) {\n        resClassUriEnc = resClassUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n    });\n\n    return this.httpGet('/v2/ontologies/classes' + resClassUriEnc);\n}",
    "ctx": {
      "type": "method",
      "name": "getResourceClasses",
      "string": "getResourceClasses()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string[]} propertyIris the Iris of the properties to be queried.",
        "name": "propertyIris",
        "description": "<p>the Iris of the properties to be queried.</p>",
        "types": [
          "Array.<string>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult> - the requested properties.",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult> - the requested properties.</p>"
      }
    ],
    "description": {
      "full": "<p>Requests properties from Knora's ontologies route.</p>",
      "summary": "<p>Requests properties from Knora's ontologies route.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 90,
    "codeStart": 96,
    "code": "getProperties(propertyIris: string[]): Observable<ApiServiceResult> {\n\n    if (propertyIris.length === 0) {\n        // no resource class Iris are given to query for, return a failed Observer\n        return Observable.create(observer => observer.error('No property Iris given for call of OntologyService.getProperties'));\n    }\n\n    let propertiesUriEnc = '';\n\n    propertyIris.forEach(function (resClassIri) {\n        propertiesUriEnc = propertiesUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n    });\n\n    return this.httpGet('/v2/ontologies/properties' + propertiesUriEnc);\n\n}\n\n// ------------------------------------------------------------------------\n// POST\n// ------------------------------------------------------------------------",
    "ctx": {
      "type": "method",
      "name": "getProperties",
      "string": "getProperties()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{NewOntology} data Data contains: projectIri, name, label",
        "name": "data",
        "description": "<p>Data contains: projectIri, name, label</p>",
        "types": [
          "NewOntology"
        ],
        "typesDescription": "<a href=\"NewOntology.html\">NewOntology</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable<ApiServiceResult> incl. ontolog iri and knora-api:lastModificationDate",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable<ApiServiceResult> incl. ontolog iri and knora-api:lastModificationDate</p>"
      }
    ],
    "description": {
      "full": "<p>Create new ontology.</p>",
      "summary": "<p>Create new ontology.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 117,
    "codeStart": 123,
    "code": "createOntology(data: NewOntology): Observable<ApiServiceResult> {\n    const path = '/v2/ontologies';\n\n    const ontology = {\n        'knora-api:ontologyName': data.name,\n        'knora-api:attachedToProject': {\n            '@id': data.projectIri,\n        },\n        'rdfs:label': data.label,\n        '@context': {\n            'rdfs': KnoraConstants.RdfsSchema,\n            'knora-api': KnoraConstants.KnoraApiV2WithValueObjectPath\n        }\n    };\n\n    return this.httpPost(path, ontology).pipe(\n        map((result: ApiServiceResult) => result.body),\n        catchError(this.handleJsonError)\n    );\n}\n\ncreateResourceClass(data: NewResourceClass): Observable<ApiServiceResult> {\n    const path = '/v2/ontologies/classes';\n\n    // TODO: add the following values to parameter\n    let onto_iri: string;\n    let onto_name: string;\n    let last_onto_date: string;\n\n    const resourceClass = {\n        '@id': onto_iri,\n        '@type': 'owl:Ontology',\n        'knora-api:lastModificationDate': last_onto_date,\n        '@graph': [{\n            '@id': onto_name + ':' + data.name,\n            '@type': 'owl:Class',\n            'rdfs:label': data.labels,\n            'rdfs:comment': data.comments,\n            'rdfs:subClassOf': {\n                '@id': data.subClassOf\n            }\n        }],\n        '@context': {\n            'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n            'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n            'owl': 'http://www.w3.org/2002/07/owl#',\n            'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n            'xsd': 'http://www.w3.org/2001/XMLSchema#',\n            onto_name: onto_iri + '#'\n        }\n\n    };\n\n    return this.httpPost(path, resourceClass).pipe(\n        map((result: ApiServiceResult) => result.body),\n        catchError(this.handleJsonError)\n    );\n\n}\n\ncreateProperty(data: NewProperty[]): Observable<ApiServiceResult> {\n    const path = '/v2/ontologies/properties';\n\n    // TODO: add the following values to parameter\n    let onto_iri: string;\n    let onto_name: string;\n    let last_onto_date: string;\n\n    const graph = [];\n\n    for (const prop of data) {\n        const prop_obj = {\n            '@id': onto_name + ':' + prop.name,\n            '@type': 'owl:ObjectProperty',\n            'rdfs:label': prop.labels,\n            'rdfs:comment': prop.comments,\n            'rdfs:subPropertyOf': prop.subPropertyOf,\n            'salsah-gui:guiElement': {\n                '@id': prop.guiElement\n            }\n        };\n        graph.push(prop_obj);\n    }\n\n    const property = {\n        '@id': onto_iri,\n        '@type': 'owl:Ontology',\n        'knora-api:lastModificationDate': last_onto_date,\n        '@graph': [\n            graph\n        ],\n        '@context': {\n            'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n            'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n            'salsah-gui': 'http://api.knora.org/ontology/salsah-gui/v2#',\n            'owl': 'http://www.w3.org/2002/07/owl#',\n            'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n            'xsd': 'http://www.w3.org/2001/XMLSchema#',\n            onto_name: onto_iri + '#'\n        }\n    };\n\n\n    return this.httpPost(path, property).pipe(\n        map((result: ApiServiceResult) => result.body),\n        catchError(this.handleJsonError)\n    );\n\n}\n\nsetCardinality(data: any): Observable<ApiServiceResult> {\n    const path = '/v2/ontologies/cardinalities';\n\n    // TODO: add the following values to parameter\n    let class_iri: string;\n    let prop_iri: string;\n\n    let onto_iri: string;\n    let onto_name: string;\n    let last_onto_date: string;\n\n    // TODO: find a way with typescript for the following python construct",
    "ctx": {
      "type": "method",
      "name": "createOntology",
      "string": "createOntology()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>let switcher = {<br />\n'1': ('owl:cardinality', 1),<br />\n'0-1': ('owl:maxCardinality', 1),<br />\n'0-n': ('owl:minCardinality', 0),<br />\n'1-n': ('owl:minCardinality', 1)<br />\n};</p>\n<pre><code>    let occurrence: any = switcher.get(data.occurrence);</code></pre>",
      "summary": "<p>let switcher = {<br />\n'1': ('owl:cardinality', 1),<br />\n'0-1': ('owl:maxCardinality', 1),<br />\n'0-n': ('owl:minCardinality', 0),<br />\n'1-n': ('owl:minCardinality', 1)<br />\n};</p>",
      "body": "<pre><code>    let occurrence: any = switcher.get(data.occurrence);</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 245,
    "codeStart": 256,
    "code": "const cardinality = {\n    '@id': onto_iri,\n    '@type': 'owl:Ontology',\n    'knora-api:lastModificationDate': last_onto_date,\n    '@graph': [{\n        '@id': class_iri,\n        '@type': 'owl:Class',\n        'rdfs:subClassOf': {\n            '@type': 'owl:Restriction',\n            // occurrence[0]: occurrence[1],\n            'owl:onProperty': {\n                '@id': prop_iri\n            }\n        }\n    }],\n    '@context': {\n        'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n        'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n        'owl': 'http://www.w3.org/2002/07/owl#',\n        'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n        'xsd': 'http://www.w3.org/2001/XMLSchema#',\n        onto_name: onto_iri + '#'\n    }\n};\n\nreturn this.httpPost(path, cardinality).pipe(\n    map((result: ApiServiceResult) => result.body),\n    catchError(this.handleJsonError)\n);\n    }\n\n}",
    "ctx": {
      "type": "declaration",
      "name": "cardinality",
      "value": "{",
      "string": "cardinality"
    }
  }
]