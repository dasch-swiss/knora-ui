[
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} path",
        "name": "path",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} path</p>"
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>GET</p>",
      "summary": "<p>GET</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 23,
    "codeStart": 29,
    "code": "httpGet(path: string, params?: any): Observable<any> {\n\n    this.loading = true;\n\n    return this.http.get(this.config.api + path, { observe: 'response', params: params }).pipe(\n        map((response: HttpResponse<any>): ApiServiceResult => {\n            this.loading = false;\n\n            const result = new ApiServiceResult();\n            result.status = response.status;\n            result.statusText = response.statusText;\n            result.url = path;\n            result.body = response.body;\n\n            return result;\n        }),\n        catchError((error: HttpErrorResponse) => {\n            this.loading = false;\n\n            return this.handleRequestError(error);\n        })\n    );\n\n}",
    "ctx": {
      "type": "method",
      "name": "httpGet",
      "string": "httpGet()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} path",
        "name": "path",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} path</p>"
      },
      {
        "type": "param",
        "string": "{any} body",
        "name": "body",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} body</p>"
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>POST</p>",
      "summary": "<p>POST</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 54,
    "codeStart": 61,
    "code": "httpPost(path: string, body?: any): Observable<any> {\n\n    this.loading = true;\n\n    // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n    return this.http.post(this.config.api + path, body, { observe: 'response' }).pipe(\n        map((response: HttpResponse<any>): ApiServiceResult => {\n            this.loading = false;\n\n            const result = new ApiServiceResult();\n            result.status = response.status;\n            result.statusText = response.statusText;\n            result.url = path;\n            result.body = response.body;\n            return result;\n        }),\n        catchError((error: HttpErrorResponse) => {\n            this.loading = false;\n\n            // console.error(error);\n\n            return this.handleRequestError(error);\n        })\n    );\n\n}",
    "ctx": {
      "type": "method",
      "name": "httpPost",
      "string": "httpPost()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} path",
        "name": "path",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} path</p>"
      },
      {
        "type": "param",
        "string": "{any} body",
        "name": "body",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} body</p>"
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>PUT</p>",
      "summary": "<p>PUT</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 89,
    "codeStart": 96,
    "code": "httpPut(path: string, body?: any): Observable<any> {\n\n    this.loading = true;\n\n    // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n    return this.http.put(this.config.api + path, body, { observe: 'response' }).pipe(\n        map((response: HttpResponse<any>): ApiServiceResult => {\n            this.loading = false;\n\n            // console.log(response);\n\n            const result = new ApiServiceResult();\n            result.status = response.status;\n            result.statusText = response.statusText;\n            result.url = path;\n            result.body = response.body;\n            return result;\n\n        }),\n        catchError((error: HttpErrorResponse) => {\n            this.loading = false;\n\n            // console.error(error);\n\n            return this.handleRequestError(error);\n        })\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "httpPut",
      "string": "httpPut()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} path",
        "name": "path",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} path</p>"
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>DELETE</p>",
      "summary": "<p>DELETE</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 126,
    "codeStart": 132,
    "code": "httpDelete(path: string): Observable<any> {\n\n    this.loading = true;\n\n    // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n    return this.http.delete(this.config.api + path, { observe: 'response' }).pipe(\n        map((response: HttpResponse<any>): ApiServiceResult => {\n            this.loading = false;\n\n            // console.log(response);\n\n            const result = new ApiServiceResult();\n            result.status = response.status;\n            result.statusText = response.statusText;\n            result.url = path;\n            result.body = response.body;\n            return result;\n\n        }),\n        catchError((error: HttpErrorResponse) => {\n            this.loading = false;\n\n            // console.error(error);\n\n            return this.handleRequestError(error);\n        })\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "httpDelete",
      "string": "httpDelete()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{HttpErrorResponse} error",
        "name": "error",
        "description": "",
        "types": [
          "HttpErrorResponse"
        ],
        "typesDescription": "<a href=\"HttpErrorResponse.html\">HttpErrorResponse</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{HttpErrorResponse} error</p>"
      },
      {
        "type": "returns",
        "string": "Observable of ApiServiceError",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of ApiServiceError</p>"
      }
    ],
    "description": {
      "full": "<p>handle request error in case of server error</p>",
      "summary": "<p>handle request error in case of server error</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 163,
    "codeStart": 169,
    "code": "protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n    // console.error(error);\n    const serviceError = new ApiServiceError();\n    serviceError.status = error.status;\n    serviceError.statusText = error.statusText;\n    serviceError.errorInfo = error.message;\n    serviceError.url = error.url;\n    return throwError(serviceError);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{any} error",
        "name": "error",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} error</p>"
      },
      {
        "type": "returns",
        "string": "Observable of ApiServiceError",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of ApiServiceError</p>"
      }
    ],
    "description": {
      "full": "<p>handle json error in case of type error in json response (json2typescript)</p>",
      "summary": "<p>handle json error in case of type error in json response (json2typescript)</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 179,
    "codeStart": 185,
    "code": "protected handleJsonError(error: any): Observable<ApiServiceError> {\n\n    if (error instanceof ApiServiceError) return throwError(error);\n\n    const serviceError = new ApiServiceError();\n    serviceError.status = -1;\n    serviceError.statusText = 'Invalid JSON';\n    serviceError.errorInfo = error;\n    serviceError.url = '';\n    return throwError(serviceError);\n\n}\n\n// the following method is replaced by the JwtInterceptor",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>protected setHeaders(): HttpHeaders {<br />\nlet currentUser: CurrentUser;<br />\nlet subscription: Subscription;</p>\n<pre><code>    // get key from local storage\n    const key = localStorage.getItem('session_id');\n\n    if (key &amp;&amp; key !== null) {\n        subscription = this._acs.get(key)\n            .subscribe(\n                (result: any) =&gt; {\n                    currentUser = result;\n                    console.log('api service -- setHeaders -- currentUser from acs', currentUser);\n                },\n                (error: any) =&gt; {\n                    console.error(error);\n                    return new HttpHeaders();\n                }\n            );\n\n        if (currentUser) {\n            return new HttpHeaders({\n                'Authorization': `Bearer ${currentUser.token}`\n            });\n        }\n    } else {\n        return new HttpHeaders();\n    }\n\n}</code></pre>",
      "summary": "<p>protected setHeaders(): HttpHeaders {<br />\nlet currentUser: CurrentUser;<br />\nlet subscription: Subscription;</p>",
      "body": "<pre><code>    // get key from local storage\n    const key = localStorage.getItem('session_id');\n\n    if (key &amp;&amp; key !== null) {\n        subscription = this._acs.get(key)\n            .subscribe(\n                (result: any) =&gt; {\n                    currentUser = result;\n                    console.log('api service -- setHeaders -- currentUser from acs', currentUser);\n                },\n                (error: any) =&gt; {\n                    console.error(error);\n                    return new HttpHeaders();\n                }\n            );\n\n        if (currentUser) {\n            return new HttpHeaders({\n                'Authorization': `Bearer ${currentUser.token}`\n            });\n        }\n    } else {\n        return new HttpHeaders();\n    }\n\n}</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 199,
    "codeStart": 231
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{HttpHeaders} options",
        "name": "options",
        "description": "",
        "types": [
          "HttpHeaders"
        ],
        "typesDescription": "<a href=\"HttpHeaders.html\">HttpHeaders</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{HttpHeaders} options</p>"
      },
      {
        "type": "returns",
        "string": "{HttpHeaders}\n!/\n    protected appendToOptions(options: any): any {\n\n        let headers: HttpHeaders;\n\n        if (!options) {\n            headers = this.appendAuthorizationHeader();\n            console.log('2a) ', headers);\n            options = {\n                headers\n            };\n            console.log('2b) ', options);\n\n        } else {\n            // have options\n            if (!options['headers']) {\n                // no headers set\n                options['headers'] = new HttpHeaders();\n                console.log('3: ', options);\n            } else {\n                // have headers, need to append to those\n                options['headers'] = this.appendAuthorizationHeader(options['headers']);\n                console.log('4: ', options);\n            }\n        }\n        return options;\n    }",
        "types": [
          "HttpHeaders"
        ],
        "typesDescription": "<a href=\"HttpHeaders.html\">HttpHeaders</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>!/<br />\nprotected appendToOptions(options: any): any {</p>\n<pre><code>    let headers: HttpHeaders;\n\n    if (!options) {\n        headers = this.appendAuthorizationHeader();\n        console.log('2a) ', headers);\n        options = {\n            headers\n        };\n        console.log('2b) ', options);\n\n    } else {\n        // have options\n        if (!options['headers']) {\n            // no headers set\n            options['headers'] = new HttpHeaders();\n            console.log('3: ', options);\n        } else {\n            // have headers, need to append to those\n            options['headers'] = this.appendAuthorizationHeader(options['headers']);\n            console.log('4: ', options);\n        }\n    }\n    return options;\n}</code></pre>"
      }
    ],
    "description": {
      "full": "<p>/!**<br />\nAppends to existing options if they exist.</p>",
      "summary": "<p>/!**<br />\nAppends to existing options if they exist.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 231,
    "codeStart": 264
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Headers} headers",
        "name": "headers",
        "description": "",
        "types": [
          "Headers"
        ],
        "typesDescription": "<a href=\"Headers.html\">Headers</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Headers} headers</p>"
      },
      {
        "type": "returns",
        "string": "{Headers}\n!/\n    protected appendAuthorizationHeader(headers?: HttpHeaders): HttpHeaders {\n\n\n        if (!headers) {\n            headers = new HttpHeaders();\n        }\n\n        if (JSON.parse(localStorage.getItem('currentUser'))) {\n            const token = JSON.parse(localStorage.getItem('currentUser')).token;\n\n//            headers.append('Authorization', 'Bearer ' + token);\n\n            headers['Authorization'] = `Bearer ${JSON.parse(localStorage.getItem('currentUser')).token}`;\n        }\n        return headers;\n    }",
        "types": [
          "Headers"
        ],
        "typesDescription": "<a href=\"Headers.html\">Headers</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>!/<br />\nprotected appendAuthorizationHeader(headers?: HttpHeaders): HttpHeaders {</p>\n<pre><code>    if (!headers) {\n        headers = new HttpHeaders();\n    }\n\n    if (JSON.parse(localStorage.getItem('currentUser'))) {\n        const token = JSON.parse(localStorage.getItem('currentUser')).token;\n</code></pre>\n<p>//            headers.append('Authorization', 'Bearer ' + token);</p>\n<pre><code>        headers['Authorization'] = `Bearer ${JSON.parse(localStorage.getItem('currentUser')).token}`;\n    }\n    return headers;\n}</code></pre>"
      }
    ],
    "description": {
      "full": "<p>/!**<br />\nAppends to existing headers if they exist.</p>",
      "summary": "<p>/!**<br />\nAppends to existing headers if they exist.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 264,
    "codeStart": 287,
    "code": "}",
    "ctx": false
  }
]