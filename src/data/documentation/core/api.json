[
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} path the URL for the GET request.",
        "name": "path",
        "description": "<p>the URL for the GET request.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{HttpParams} params the parameters for the GET request.",
        "name": "params",
        "description": "<p>the parameters for the GET request.</p>",
        "types": [
          "HttpParams"
        ],
        "typesDescription": "<a href=\"HttpParams.html\">HttpParams</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>GET</p>",
      "summary": "<p>GET</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 30,
    "codeStart": 37,
    "code": "httpGet(path: string, params?: HttpParams): Observable<any> {\n\n    this.loading = true;\n\n    return this.http.get(this.config.api + path, {observe: 'response', params: params}).pipe(\n        map((response: HttpResponse<any>): ApiServiceResult => {\n            this.loading = false;\n\n            const result = new ApiServiceResult();\n            result.status = response.status;\n            result.statusText = response.statusText;\n            result.url = path;\n            result.body = response.body;\n\n            return result;\n        }),\n        catchError((error: HttpErrorResponse) => {\n            this.loading = false;\n\n            return this.handleRequestError(error);\n        })\n    );\n\n}",
    "ctx": {
      "type": "method",
      "name": "httpGet",
      "string": "httpGet()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{ApiServiceResult} resourceResponse",
        "name": "resourceResponse",
        "description": "",
        "types": [
          "ApiServiceResult"
        ],
        "typesDescription": "<a href=\"ApiServiceResult.html\">ApiServiceResult</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ApiServiceResult} resourceResponse</p>"
      }
    ],
    "description": {
      "full": "<p>Processes JSON-LD returned by Knora.<br />\nExpands Iris and creates an empty context object.</p>",
      "summary": "<p>Processes JSON-LD returned by Knora.<br />\nExpands Iris and creates an empty context object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 62,
    "codeStart": 68,
    "code": "protected processJSONLD(resourceResponse: ApiServiceResult): Observable<object> {\n\n    const resPromises = jsonld.promises;\n    // compact JSON-LD using an empty context: expands all Iris\n    const resPromise = resPromises.compact(resourceResponse.body, {});\n\n    // convert promise to Observable and return it\n    // https://www.learnrxjs.io/operators/creation/frompromise.html\n    return from(resPromise);\n\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} path",
        "name": "path",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} path</p>"
      },
      {
        "type": "param",
        "string": "{any} body",
        "name": "body",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} body</p>"
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>POST</p>",
      "summary": "<p>POST</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 80,
    "codeStart": 87,
    "code": "httpPost(path: string, body?: any): Observable<any> {\n\n    this.loading = true;\n\n    // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n    return this.http.post(this.config.api + path, body, {observe: 'response'}).pipe(\n        map((response: HttpResponse<any>): ApiServiceResult => {\n            this.loading = false;\n\n            const result = new ApiServiceResult();\n            result.status = response.status;\n            result.statusText = response.statusText;\n            result.url = path;\n            result.body = response.body;\n            return result;\n        }),\n        catchError((error: HttpErrorResponse) => {\n            this.loading = false;\n\n            // console.error(error);\n\n            return this.handleRequestError(error);\n        })\n    );\n\n}",
    "ctx": {
      "type": "method",
      "name": "httpPost",
      "string": "httpPost()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} path",
        "name": "path",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} path</p>"
      },
      {
        "type": "param",
        "string": "{any} body",
        "name": "body",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} body</p>"
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>PUT</p>",
      "summary": "<p>PUT</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 115,
    "codeStart": 122,
    "code": "httpPut(path: string, body?: any): Observable<any> {\n\n    this.loading = true;\n\n    // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n    return this.http.put(this.config.api + path, body, {observe: 'response'}).pipe(\n        map((response: HttpResponse<any>): ApiServiceResult => {\n            this.loading = false;\n\n            // console.log(response);\n\n            const result = new ApiServiceResult();\n            result.status = response.status;\n            result.statusText = response.statusText;\n            result.url = path;\n            result.body = response.body;\n            return result;\n\n        }),\n        catchError((error: HttpErrorResponse) => {\n            this.loading = false;\n\n            // console.error(error);\n\n            return this.handleRequestError(error);\n        })\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "httpPut",
      "string": "httpPut()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} path",
        "name": "path",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} path</p>"
      },
      {
        "type": "returns",
        "string": "Observable of any",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of any</p>"
      }
    ],
    "description": {
      "full": "<p>DELETE</p>",
      "summary": "<p>DELETE</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 152,
    "codeStart": 158,
    "code": "httpDelete(path: string): Observable<any> {\n\n    this.loading = true;\n\n    // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n    return this.http.delete(this.config.api + path, {observe: 'response'}).pipe(\n        map((response: HttpResponse<any>): ApiServiceResult => {\n            this.loading = false;\n\n            // console.log(response);\n\n            const result = new ApiServiceResult();\n            result.status = response.status;\n            result.statusText = response.statusText;\n            result.url = path;\n            result.body = response.body;\n            return result;\n\n        }),\n        catchError((error: HttpErrorResponse) => {\n            this.loading = false;\n\n            // console.error(error);\n\n            return this.handleRequestError(error);\n        })\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "httpDelete",
      "string": "httpDelete()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{HttpErrorResponse} error",
        "name": "error",
        "description": "",
        "types": [
          "HttpErrorResponse"
        ],
        "typesDescription": "<a href=\"HttpErrorResponse.html\">HttpErrorResponse</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{HttpErrorResponse} error</p>"
      },
      {
        "type": "returns",
        "string": "Observable of ApiServiceError",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of ApiServiceError</p>"
      }
    ],
    "description": {
      "full": "<p>handle request error in case of server error</p>",
      "summary": "<p>handle request error in case of server error</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 189,
    "codeStart": 195,
    "code": "protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n    // console.error(error);\n    const serviceError = new ApiServiceError();\n    serviceError.status = error.status;\n    serviceError.statusText = error.statusText;\n    serviceError.errorInfo = error.message;\n    serviceError.url = error.url;\n    return throwError(serviceError);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{any} error",
        "name": "error",
        "description": "",
        "types": [
          "any"
        ],
        "typesDescription": "<a href=\"any.html\">any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{any} error</p>"
      },
      {
        "type": "returns",
        "string": "Observable of ApiServiceError",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>Observable of ApiServiceError</p>"
      }
    ],
    "description": {
      "full": "<p>handle json error in case of type error in json response (json2typescript)</p>",
      "summary": "<p>handle json error in case of type error in json response (json2typescript)</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 205,
    "codeStart": 211,
    "code": "protected handleJsonError(error: any): Observable<ApiServiceError> {\n\n    if (error instanceof ApiServiceError) return throwError(error);\n\n    const serviceError = new ApiServiceError();\n    serviceError.status = -1;\n    serviceError.statusText = 'Invalid JSON';\n    serviceError.errorInfo = error;\n    serviceError.url = '';\n    return throwError(serviceError);\n\n}\n}",
    "ctx": false
  }
]