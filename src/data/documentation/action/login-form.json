[
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [navigate]",
        "name": "[navigate]",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} [navigate]</p>"
      }
    ],
    "description": {
      "full": "<p>Navigate to the defined url (or path) after successful login</p>",
      "summary": "<p>Navigate to the defined url (or path) after successful login</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 12,
    "codeStart": 17,
    "code": "@Input() navigate?: string;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [color]",
        "name": "[color]",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} [color]</p>"
      }
    ],
    "description": {
      "full": "<p>Set your theme color here,<br />\nit will be used in the progress-indicator and the buttons</p>",
      "summary": "<p>Set your theme color here,<br />\nit will be used in the progress-indicator and the buttons</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 19,
    "codeStart": 25,
    "code": "@Input() color?: string;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{EventEmitter<boolean>} status",
        "name": "status",
        "description": "",
        "types": [
          "EventEmitter.<boolean>"
        ],
        "typesDescription": "<a href=\"EventEmitter.html\">EventEmitter</a>.&lt;<code>boolean</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{EventEmitter<boolean>} status</p>"
      }
    ],
    "description": {
      "full": "<p>Emits true when the login process was successful and false in case of error on login or false after logout process</p>",
      "summary": "<p>Emits true when the login process was successful and false in case of error on login or false after logout process</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 27,
    "codeStart": 33,
    "code": "@Output() status: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n// is there already a valid session?\nsession: Session;\n\n// form\nform: FormGroup;\n\n// show progress indicator\nloading: boolean = false;\n\n// general error message\nerrorMessage: ApiResponseError;\n\n// specific error messages\nloginErrorUser = false;\nloginErrorPw = false;\nloginErrorServer = false;\n\n// labels for the login form\n// TODO: should be handled by translation service (i18n)\nformLabel = {\n    title: 'Login here',\n    name: 'Username',\n    pw: 'Password',\n    submit: 'Login',\n    retry: 'Retry',\n    logout: 'LOGOUT',\n    remember: 'Remember me',\n    forgot_pw: 'Forgot password?',\n    error: {\n        failed: 'Password or username is wrong',\n        server: 'There\\'s an error with the server connection. Try it again later or inform the Knora Team'\n    }\n};\n\n// error definitions for the following form fields\nformErrors = {\n    'username': '',\n    'password': ''\n};\n\n// error messages for the form fields defined in formErrors\nvalidationMessages = {\n    'username': {\n        'required': 'user name is required.'\n    },\n    'password': {\n        'required': 'password is required'\n    }\n};\n\n\nconstructor(\n    @Inject(KnoraApiConnectionToken) private knoraApiConnection: KnoraApiConnection,\n    private _session: SessionService,\n    private _fb: FormBuilder\n) { }\n\nngOnInit() {\n    // if session is valid (a user is logged-in) show a message, otherwise build the form\n    if (this._session.validateSession()) {\n        this.session = JSON.parse(localStorage.getItem('session'));\n    } else {\n        this.buildForm();\n    }\n}\n\nbuildForm(): void {\n    this.form = this._fb.group({\n        username: ['', Validators.required],\n        password: ['', Validators.required]\n    });\n}",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Login and set session</p>",
      "summary": "<p>Login and set session</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 108,
    "codeStart": 111,
    "code": "login() {\n\n    this.loading = true;\n\n    // reset the error messages\n    this.errorMessage = undefined;\n\n    // Grab values from form\n    const identifier = this.form.get('username').value;\n    const password = this.form.get('password').value;\n\n    const identifierType: 'iri' | 'email' | 'username' = (identifier.indexOf('@') > -1 ? 'email' : 'username');\n\n    this.knoraApiConnection.v2.auth.login(identifierType, identifier, password).subscribe(\n        (response: ApiResponseData<LoginResponse>) => {\n\n            this._session.setSession(response.body.token, identifier, identifierType);\n\n            setTimeout(() => {\n                this.status.emit(true);\n                this.loading = false;\n            }, 2200);\n        },\n        (error: ApiResponseError) => {\n            // error handling\n            this.loginErrorUser = (error.status === 404);\n            this.loginErrorPw = (error.status === 401);\n            this.loginErrorServer = (error.status === 0);\n\n            this.errorMessage = error;\n\n            this.loading = false;\n            // TODO: update error handling similar to the old method (see commented code below)\n        }\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "login",
      "string": "login()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Logout and destroy session</p>",
      "summary": "<p>Logout and destroy session</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 148,
    "codeStart": 152,
    "code": "logout() {\n    this.loading = true;\n\n    this.knoraApiConnection.v2.auth.logout().subscribe(\n        (response: ApiResponseData<LogoutResponse>) => {\n            this.status.emit(response.body.status === 0);\n            this._session.destroySession();\n            this.loading = false;\n        },\n        (error: ApiResponseError) => {\n            console.error(error);\n            this.loading = false;\n        }\n    );\n\n}\n\n}",
    "ctx": {
      "type": "method",
      "name": "logout",
      "string": "logout()"
    }
  }
]