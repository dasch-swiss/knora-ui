[
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nThis service has been moved to `@knora/core`. Update your import path.",
        "html": "<p>since v9.5.0<br />\nThis service has been moved to <code>@knora/core</code>. Update your import path.</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 12,
    "codeStart": 17,
    "code": "@Injectable({\n    providedIn: 'root'\n})\nexport class SessionService {\n\n    public session: Session;",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>max session time in milliseconds<br />\ndefault value (24h): 86400000</p>",
      "summary": "<p>max session time in milliseconds<br />\ndefault value (24h): 86400000</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 24,
    "codeStart": 29,
    "code": "readonly MAX_SESSION_TIME: number = 86400000; // 1d = 24 * 60 * 60 * 1000\n\nconstructor(\n    private _http: HttpClient,\n    @Inject(KuiCoreConfigToken) public config,\n    private _users: UsersService) {\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0 \nset the session by using the json web token (jwt) and the user object;\nit will be used in the login process",
        "html": "<p>since v9.5.0<br />\nset the session by using the json web token (jwt) and the user object;<br />\nit will be used in the login process</p>"
      },
      {
        "type": "param",
        "string": "jwt",
        "name": "jwt",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>jwt</p>"
      },
      {
        "type": "param",
        "string": "username",
        "name": "username",
        "description": "",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "html": "<p>username</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 37,
    "codeStart": 46,
    "code": "setSession(jwt: string, username: string) {\n\n    // define a session id, which is the timestamp of login\n    this.session = {\n        id: this.setTimestamp(),\n        user: {\n            name: '',\n            jwt: jwt,\n            lang: '',\n            sysAdmin: false,\n            projectAdmin: []\n        }\n    };\n    // store in the localStorage\n    localStorage.setItem('session', JSON.stringify(this.session));\n\n    // username can be either name or email address, so what do we have?\n    const identifierType: string = ((username.indexOf('@') > -1) ? 'email' : 'username');\n\n    // get user information\n    this._users.getUser(username, identifierType).subscribe(\n        (result: User) => {\n            let sysAdmin: boolean = false;\n            const projectAdmin: string[] = [];\n\n            const groupsPerProjectKeys: string[] = Object.keys(result.permissions.groupsPerProject);\n\n            for (const key of groupsPerProjectKeys) {\n                if (key === KnoraConstants.SystemProjectIRI) {\n                    sysAdmin = result.permissions.groupsPerProject[key].indexOf(KnoraConstants.SystemAdminGroupIRI) > -1;\n                }\n\n                if (result.permissions.groupsPerProject[key].indexOf(KnoraConstants.ProjectAdminGroupIRI) > -1) {\n                    projectAdmin.push(key);\n                }\n            }\n\n\n            // replace existing session in localstorage\n            this.session = {\n                id: this.setTimestamp(),\n                user: {\n                    name: result.username,\n                    jwt: jwt,\n                    lang: result.lang,\n                    sysAdmin: sysAdmin,\n                    projectAdmin: projectAdmin\n                }\n            };\n            // update localStorage\n            localStorage.setItem('session', JSON.stringify(this.session));\n\n        },\n        (error: ApiServiceError) => {\n            console.error(error);\n        }\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "setSession",
      "string": "setSession()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 105,
    "codeStart": 108,
    "code": "private setTimestamp() {\n    return (moment().add(0, 'second')).valueOf();\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 112,
    "codeStart": 115,
    "code": "validateSession() {\n    // mix of checks with session.validation and this.authenticate\n    this.session = JSON.parse(localStorage.getItem('session'));\n\n    const tsNow: number = this.setTimestamp();\n\n    if (this.session) {\n        // the session exists\n        // check if the session is still valid:\n        // if session.id + MAX_SESSION_TIME > now: _session.validateSession()\n        if (this.session.id + this.MAX_SESSION_TIME < tsNow) {\n            // the internal session has expired\n            // check if the api v2/authentication is still valid\n\n            if (this.authenticate()) {\n                // the api authentication is valid;\n                // update the session.id\n                this.session.id = tsNow;\n\n                localStorage.setItem('session', JSON.stringify(this.session));\n                return true;\n\n            } else {\n                // console.error('session.service -- validateSession -- authenticate: the session expired on API side');\n                // a user is not authenticated anymore!\n                this.destroySession();\n                return false;\n            }\n\n        } else {\n            return true;\n        }\n    }\n    return false;\n}",
    "ctx": {
      "type": "method",
      "name": "validateSession",
      "string": "validateSession()"
    }
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 151,
    "codeStart": 154,
    "code": "private authenticate(): Observable<boolean> {\n    return this._http.get(this.config.api + '/v2/authentication').pipe(\n        map((result: any) => {\n            // console.log('AuthenticationService - authenticate - result: ', result);\n            // return true || false\n            return result.status === 200;\n        })\n    );\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "since v9.5.0",
        "html": "<p>since v9.5.0</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 164,
    "codeStart": 167,
    "code": "destroySession() {\n    localStorage.removeItem('session');\n}\n\n}",
    "ctx": {
      "type": "method",
      "name": "destroySession",
      "string": "destroySession()"
    }
  }
]