[
  {
    "tags": [
      {
        "type": "deprecated",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 14,
    "codeStart": 17,
    "code": "@Component({\n    selector: 'kui-fulltext-search',\n    templateUrl: './fulltext-search.component.html',\n    styleUrls: ['./fulltext-search.component.scss', '../assets/style/search.scss']\n})\nexport class FulltextSearchComponent implements OnInit {",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} route Route to navigate after search.\nThis route path should contain a component for search results.",
        "name": "route",
        "description": "<p>Route to navigate after search. This route path should contain a component for search results.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 24,
    "codeStart": 29,
    "code": "@Input() route: string = '/search';",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [projectfilter] If true it shows the selection\nof projects to filter by one of them",
        "name": "[projectfilter]",
        "description": "<p>If true it shows the selection of projects to filter by one of them</p>",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 31,
    "codeStart": 36,
    "code": "@Input() projectfilter?: boolean = false;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [filterbyproject] If the full-text search should be\nfiltered by one project, you can define it with project iri.",
        "name": "[filterbyproject]",
        "description": "<p>If the full-text search should be filtered by one project, you can define it with project iri.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 38,
    "codeStart": 43,
    "code": "@Input() filterbyproject?: string;\n\n@ViewChild('fulltextSearchPanel') searchPanel: ElementRef;\n@ViewChild('fulltextSearchInput') searchInput: ElementRef;\n@ViewChild('fulltextSearchMenu') searchMenu: TemplateRef<any>;\n\n@ViewChild('btnToSelectProject') selectProject: MatMenuTrigger;\n\n// search query\nsearchQuery: string;\n\n// previous search = full-text search history\nprevSearch: PrevSearchItem[] = JSON.parse(localStorage.getItem('prevSearch'));\n\n// list of projects, in case of filterproject is true\nprojects: Project[];\n\n// selected project, in case of filterbyproject and/or projectfilter is true\nproject: Project;\ndefaultProjectLabel: string = 'All projects';\nprojectLabel: string = this.defaultProjectLabel;\nprojectIri: string;\n\n// in case of an (api) error\nerror: any;\n\n// is search panel focused?\nsearchPanelFocus: boolean = false;\n\n// overlay reference\noverlayRef: OverlayRef;\n\nconstructor (\n    private _overlay: Overlay,\n    private _router: Router,\n    private _viewContainerRef: ViewContainerRef,\n    private _projectsService: ProjectsService\n) { }\n\nngOnInit() {\n\n    // this.setFocus();\n\n    if (this.filterbyproject) {\n        this.getProject(this.filterbyproject);\n    }\n\n    if (this.projectfilter) {\n        this.getAllProjects();\n\n        if (localStorage.getItem('currentProject') !== null) {\n            this.setProject(\n                JSON.parse(localStorage.getItem('currentProject'))\n            );\n        }\n    }\n}\n\nopenPanelWithBackdrop() {\n    const config = new OverlayConfig({\n        hasBackdrop: true,\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n        // backdropClass: 'cdk-overlay-dark-backdrop',\n        positionStrategy: this.getOverlayPosition(),\n        scrollStrategy: this._overlay.scrollStrategies.block()\n    });\n\n    this.overlayRef = this._overlay.create(config);\n    this.overlayRef.attach(new TemplatePortal(this.searchMenu, this._viewContainerRef));\n    this.overlayRef.backdropClick().subscribe(() => {\n        this.searchPanelFocus = false;\n        this.overlayRef.detach();\n    });\n}\n\ngetOverlayPosition(): PositionStrategy {\n    const positions = [\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\n    ];\n\n    const overlayPosition = this._overlay.position().flexibleConnectedTo(this.searchPanel).withPositions(positions).withLockedPosition(false);\n\n    return overlayPosition;\n}\n\ngetAllProjects(): void {\n    this._projectsService.getAllProjects().subscribe(\n        (projects: Project[]) => {\n            this.projects = projects;\n            // this.loadSystem = false;\n            if (localStorage.getItem('currentProject') !== null) {\n                this.project = JSON.parse(\n                    localStorage.getItem('currentProject')\n                );\n            }\n        },\n        (error: ApiServiceError) => {\n            console.error(error);\n            this.error = error;\n        }\n    );\n}\n\ngetProject(id: string): void {\n    this._projectsService.getProjectByIri(id).subscribe(\n        (project: Project) => {\n            this.setProject(project);\n        },\n        (error: ApiServiceError) => {\n            console.error(error);\n        }\n    );\n}\n\n// set current project and switch focus to input field\nsetProject(project?: Project): void {\n    if (!project) {\n        // set default project: all\n        this.projectLabel = this.defaultProjectLabel;\n        this.projectIri = undefined;\n        localStorage.removeItem('currentProject');\n    } else {\n        // set current project shortname and id\n        this.projectLabel = project.shortname;\n        this.projectIri = project.id;\n        localStorage.setItem('currentProject', JSON.stringify(project));\n    }\n}\n\ndoSearch(): void {\n    if (this.searchQuery !== undefined && this.searchQuery !== null) {\n        if (this.projectIri !== undefined) {\n            this._router.navigate([\n                this.route +\n                '/fulltext/' +\n                this.searchQuery +\n                '/' +\n                encodeURIComponent(this.projectIri)\n            ]);\n        } else {\n            this._router.navigate([\n                this.route + '/fulltext/' + this.searchQuery\n            ]);\n        }\n        // push the search query into the local storage prevSearch array (previous search)\n        // to have a list of recent search requests\n        let existingPrevSearch: PrevSearchItem[] = JSON.parse(\n            localStorage.getItem('prevSearch')\n        );\n        if (existingPrevSearch === null) {\n            existingPrevSearch = [];\n        }\n        let i: number = 0;\n        for (const entry of existingPrevSearch) {\n            // remove entry, if exists already\n            if (this.searchQuery === entry.query && this.projectIri === entry.projectIri) {\n                existingPrevSearch.splice(i, 1);\n            }\n            i++;\n        }\n\n        // A search value is expected to have at least length of 3\n        if (this.searchQuery.length > 2) {\n            let currentQuery: PrevSearchItem = {\n                query: this.searchQuery\n            };\n\n            if (this.projectIri) {\n                currentQuery = {\n                    projectIri: this.projectIri,\n                    projectLabel: this.projectLabel,\n                    query: this.searchQuery\n                };\n            }\n\n            existingPrevSearch.push(currentQuery);\n\n            localStorage.setItem(\n                'prevSearch',\n                JSON.stringify(existingPrevSearch)\n            );\n        }\n    }\n    this.resetSearch();\n    this.overlayRef.detach();\n}\n\nresetSearch(): void {\n    this.searchPanelFocus = false;\n    this.searchInput.nativeElement.blur();\n    this.overlayRef.detach();\n}\n\nsetFocus(): void {\n    this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n    this.searchPanelFocus = true;\n    this.openPanelWithBackdrop();\n}\n\ndoPrevSearch(prevSearch: PrevSearchItem): void {\n    this.searchQuery = prevSearch.query;\n\n    if (prevSearch.projectIri !== undefined) {\n        this.projectIri = prevSearch.projectIri;\n        this.projectLabel = prevSearch.projectLabel;\n        this._router.navigate([this.route + '/fulltext/' + this.searchQuery + '/' + encodeURIComponent(prevSearch.projectIri)]);\n    } else {\n        this.projectIri = undefined;\n        this.projectLabel = this.defaultProjectLabel;\n        this._router.navigate([this.route + '/fulltext/' + this.searchQuery]);\n    }\n\n    this.resetSearch();\n    this.overlayRef.detach();\n}\n\nresetPrevSearch(prevSearch?: PrevSearchItem): void {\n    if (prevSearch) {\n        // delete only this item with the name ...\n        const i: number = this.prevSearch.indexOf(prevSearch);\n        this.prevSearch.splice(i, 1);\n        localStorage.setItem('prevSearch', JSON.stringify(this.prevSearch));\n    } else {\n        // delete the whole \"previous search\" array\n        localStorage.removeItem('prevSearch');\n    }\n    this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n}\n\nchangeFocus() {\n    this.selectProject.closeMenu();\n    this.searchInput.nativeElement.focus();\n    this.setFocus();\n}\n}",
    "ctx": false
  }
]