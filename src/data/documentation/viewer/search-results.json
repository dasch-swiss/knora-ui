[
  {
    "tags": [],
    "description": {
      "full": "<p>The search-results gets the search mode and parameters from routes or inputs,<br />\nand returns the corresponding resources that are displayed in a list or a grid.<br />\nThe results can be filtered by project.</p>",
      "summary": "<p>The search-results gets the search mode and parameters from routes or inputs,<br />\nand returns the corresponding resources that are displayed in a list or a grid.<br />\nThe results can be filtered by project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 16,
    "codeStart": 21,
    "code": "@Component({\n    selector: 'kui-search-results',\n    templateUrl: './search-results.component.html',\n    styleUrls: ['./search-results.component.scss']\n})\nexport class SearchResultsComponent implements OnInit, OnChanges, OnDestroy {",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [complexView] If true it shows 2 ways to display the search results: list or grid.",
        "name": "[complexView]",
        "description": "<p>If true it shows 2 ways to display the search results: list or grid.</p>",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 27,
    "codeStart": 31,
    "code": "@Input() complexView?: boolean = false;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [searchQuery] Search parameters. It can be a gravsearch query (extended mode) or string (fulltext mode).",
        "name": "[searchQuery]",
        "description": "<p>Search parameters. It can be a gravsearch query (extended mode) or string (fulltext mode).</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 33,
    "codeStart": 37,
    "code": "@Input() searchQuery?: string;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [searchMode] Search mode: Extended or fulltext.",
        "name": "[searchMode]",
        "description": "<p>Search mode: Extended or fulltext.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 39,
    "codeStart": 43,
    "code": "@Input() searchMode?: string;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} [projectIri] Project Iri. To filter the results by project.",
        "name": "[projectIri]",
        "description": "<p>Project Iri. To filter the results by project.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 45,
    "codeStart": 49,
    "code": "@Input() projectIri?: string;\n\nKnoraConstants = KnoraConstants;\noffset: number = 0;\nmaxOffset: number = 0;\ngravSearchQuery: string;\ngravsearchGenerator: ExtendedSearchParams;\nresult: ReadResource[] = [];\nontologyInfo: OntologyInformation;\nnumberOfAllResults: number;\nrerender: boolean = false;\nbadRequest: boolean = false;\nloading = true;\nerrorMessage: ApiServiceError = new ApiServiceError();\nnavigationSubscription: Subscription;\npagingLimit: number = 25;\n\nconstructor(\n    private _route: ActivatedRoute,\n    private _searchService: SearchService,\n    private _searchParamsService: SearchParamsService,\n    private _router: Router\n) {\n\n}\n\nngOnInit() {\n    this.getParams();\n}\n\nngOnChanges() {\n    this.getParams();\n}\n\nngOnDestroy() {\n    if (this.navigationSubscription !== undefined) {\n        this.navigationSubscription.unsubscribe();\n    }\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Get the parameters from the route</p>",
      "summary": "<p>Get the parameters from the route</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 89,
    "codeStart": 93,
    "code": "getParams() {\n    this.navigationSubscription = this._route.paramMap.subscribe(\n        (params: Params) => {\n            if (!this.searchMode) {\n                this.searchMode = params.get('mode');\n            }\n\n            if (params.get('project') && (this.projectIri !== decodeURIComponent(params.get('project')))) {\n                this.projectIri = decodeURIComponent(params.get('project'));\n            }\n\n            // init offset  and result\n            this.offset = 0;\n            this.result = [];\n\n            if (this.searchMode === 'fulltext') {\n                this.searchQuery = params.get('q');\n                this.badRequest = this.searchQuery.length < 3;\n            } else if (this.searchMode === 'extended') {\n                this.gravsearchGenerator = this._searchParamsService.getSearchParams();\n\n                if (!this.searchQuery) {\n                    this.generateGravsearchQuery();\n                } else {\n                    this.gravSearchQuery = this.searchQuery;\n                }\n            }\n\n            this.rerender = true;\n            this.getResult();\n        }\n    );\n}",
    "ctx": {
      "type": "method",
      "name": "getParams",
      "string": "getParams()"
    }
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Generates the Gravsearch query for the current offset.</p>",
      "summary": "<p>Generates the Gravsearch query for the current offset.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 127,
    "codeStart": 131,
    "code": "private generateGravsearchQuery() {\n    const gravsearch:\n        | string\n        | boolean = this.gravsearchGenerator.generateGravsearch(\n            this.offset\n        );\n    if (gravsearch === false) {\n        // no valid search params (application has been reloaded)\n        // go to root\n        this._router.navigate([''], { relativeTo: this._route });\n        return;\n    } else {\n        this.gravSearchQuery = <string>gravsearch;\n    }\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Get search result from Knora - 2 cases: simple search and extended search</p>",
      "summary": "<p>Get search result from Knora - 2 cases: simple search and extended search</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 147,
    "codeStart": 151,
    "code": "private getResult() {\n    this.loading = true;\n\n    // reset the error message\n    this.errorMessage = undefined;\n\n    // FULLTEXT SEARCH\n    if (this.searchMode === 'fulltext') {\n        this.rerender = true;\n        if (this.badRequest) {\n            this.errorMessage = new ApiServiceError();\n            this.errorMessage.errorInfo =\n                'A search value is expected to have at least length of 3 characters.';\n            this.loading = false;\n            this.rerender = false;\n        } else {\n            if (this.projectIri) {\n                this.searchQuery += '?limitToProject=' + this.projectIri;\n            }\n\n            if (this.offset === 0) {\n                // perform count query\n                this._searchService\n                    .doFullTextSearchCountQueryCountQueryResult(\n                        this.searchQuery\n                    )\n                    .subscribe(\n                        this.showNumberOfAllResults,\n                        (error: ApiServiceError) => {\n                            this.errorMessage = <ApiServiceError>error;\n                        }\n                    );\n            }\n\n            // perform full text search\n            this._searchService\n                .doFullTextSearchReadResourceSequence(\n                    this.searchQuery,\n                    this.offset\n                )\n                .subscribe(\n                    this.processSearchResults, // function pointer\n                    (error: ApiServiceError) => {\n                        this.errorMessage = <ApiServiceError>error;\n                        console.log('error', error);\n                        console.log('message', this.errorMessage);\n                    }\n                );\n        }\n\n        // EXTENDED SEARCH\n    } else if (this.searchMode === 'extended') {\n        // perform count query\n        if (this.offset === 0) {\n            this._searchService\n                .doExtendedSearchCountQueryCountQueryResult(\n                    this.gravSearchQuery\n                )\n                .subscribe(\n                    this.showNumberOfAllResults,\n                    (error: ApiServiceError) => {\n                        this.errorMessage = <ApiServiceError>error;\n                    }\n                );\n        }\n        this._searchService\n            .doExtendedSearchReadResourceSequence(this.gravSearchQuery)\n            .subscribe(\n                this.processSearchResults, // function pointer\n                (error: ApiServiceError) => {\n                    this.errorMessage = <ApiServiceError>error;\n                }\n            );\n    } else {\n        this.errorMessage = new ApiServiceError();\n        this.errorMessage.errorInfo = `search mode invalid: ${\n            this.searchMode\n            }`;\n    }\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{ReadResourcesSequence} searchResult the answer to a search request.",
        "name": "searchResult",
        "description": "<p>the answer to a search request.</p>",
        "types": [
          "ReadResourcesSequence"
        ],
        "typesDescription": "<a href=\"ReadResourcesSequence.html\">ReadResourcesSequence</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Converts search results from JSON-LD to a [[ReadResourcesSequence]] and requests information about ontology entities.<br />\nThis function is passed to <code>subscribe</code> as a pointer (instead of redundantly defining the same lambda function).</p>",
      "summary": "<p>Converts search results from JSON-LD to a [[ReadResourcesSequence]] and requests information about ontology entities.<br />\nThis function is passed to <code>subscribe</code> as a pointer (instead of redundantly defining the same lambda function).</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 232,
    "codeStart": 240,
    "code": "private processSearchResults = (searchResult: ReadResourcesSequence) => {\n    // assign ontology information to a variable so it can be used in the component's template\n    if (this.ontologyInfo === undefined) {\n        // init ontology information\n        this.ontologyInfo = searchResult.ontologyInformation;\n    } else {\n        // update ontology information\n        this.ontologyInfo.updateOntologyInformation(\n            searchResult.ontologyInformation\n        );\n    }\n    // append results to search results\n    this.result = this.result.concat(searchResult.resources);\n    // console.log('search results', this.result);\n\n    this.loading = false;\n    this.rerender = false;\n};",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{ApiServiceResult} countQueryResult the response to a count query.",
        "name": "countQueryResult",
        "description": "<p>the response to a count query.</p>",
        "types": [
          "ApiServiceResult"
        ],
        "typesDescription": "<a href=\"ApiServiceResult.html\">ApiServiceResult</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Shows total number of results returned by a count query.</p>",
      "summary": "<p>Shows total number of results returned by a count query.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 259,
    "codeStart": 265,
    "code": "private showNumberOfAllResults = (countQueryResult: CountQueryResult) => {\n    this.numberOfAllResults = countQueryResult.numberOfResults;\n\n    if (this.numberOfAllResults > 0) {\n        // offset is 0-based\n        // if numberOfAllResults equals the pagingLimit, the max. offset is 0\n        this.maxOffset = Math.floor(\n            (this.numberOfAllResults - 1) / this.pagingLimit\n        );\n    } else {\n        this.maxOffset = 0;\n    }\n};",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "ignore",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{number} offset",
        "name": "offset",
        "description": "",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{number} offset</p>"
      },
      {
        "type": "returns",
        "string": "void",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>void</p>"
      }
    ],
    "description": {
      "full": "<p>Loads the next page of results.<br />\nThe results will be appended to the existing ones.</p>",
      "summary": "<p>Loads the next page of results.<br />\nThe results will be appended to the existing ones.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 279,
    "codeStart": 287,
    "code": "loadMore(offset: number): void {\n    // update the page offset when the end of scroll is reached to get the next page of search results\n    if (this.offset < this.maxOffset) {\n        this.offset++;\n    } else {\n        return;\n    }\n\n    if (this.searchMode === 'extended') {\n        this.generateGravsearchQuery();\n    }\n\n    this.getResult();\n}\n}",
    "ctx": {
      "type": "method",
      "name": "loadMore",
      "string": "loadMore()"
    }
  }
]