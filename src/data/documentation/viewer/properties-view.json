[
  {
    "tags": [],
    "description": {
      "full": "<p>Shows all metadata (properties) in the resource viewer</p>",
      "summary": "<p>Shows all metadata (properties) in the resource viewer</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 7,
    "codeStart": 11,
    "code": "@Component({\n    selector: 'kui-properties-view',\n    templateUrl: './properties-view.component.html',\n    styleUrls: ['./properties-view.component.scss']\n})\nexport class PropertiesViewComponent implements OnInit {",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{TempProperty} propArray",
        "name": "propArray",
        "description": "",
        "types": [
          "TempProperty"
        ],
        "typesDescription": "<a href=\"TempProperty.html\">TempProperty</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{TempProperty} propArray</p>"
      }
    ],
    "description": {
      "full": "<p>Array of property object with ontology class prop def, list of properties and corresponding values</p>",
      "summary": "<p>Array of property object with ontology class prop def, list of properties and corresponding values</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 18,
    "codeStart": 23,
    "code": "@Input() propArray: TempProperty;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [allProps]",
        "name": "[allProps]",
        "description": "",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{boolean} [allProps]</p>"
      }
    ],
    "description": {
      "full": "<p>Show all properties, even they don't have a value.</p>",
      "summary": "<p>Show all properties, even they don't have a value.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 25,
    "codeStart": 30,
    "code": "@Input() allProps?: boolean = false;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean} [toolbar]",
        "name": "[toolbar]",
        "description": "",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{boolean} [toolbar]</p>"
      }
    ],
    "description": {
      "full": "<p>Show toolbar with project info and some action tools</p>",
      "summary": "<p>Show toolbar with project info and some action tools</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 32,
    "codeStart": 37,
    "code": "@Input() toolbar?: boolean = false;\n\nloading: boolean = false;\n\nconstructor(\n    protected _router: Router) {\n}\n\nngOnInit() {\n\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} id Incoming resource iri",
        "name": "id",
        "description": "<p>Incoming resource iri</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Navigate to the incoming resource view.</p>",
      "summary": "<p>Navigate to the incoming resource view.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 49,
    "codeStart": 54,
    "code": "openLink(id: string) {\n\n    this.loading = true;\n    // this.routeChanged.emit(id);\n    this._router.navigate(['/resource/' + encodeURIComponent(id)]);\n\n}\n\n\n}",
    "ctx": {
      "type": "method",
      "name": "openLink",
      "string": "openLink()"
    }
  }
]